#!/bin/bash
set -e

echo "=== نصب پنل مانیتورینگ لورنا (Ubuntu 22.04+) ==="
echo "1) نصب و راه‌اندازی پنل"
echo "2) حذف پنل"
read -p "انتخاب (1 یا 2): " CHOICE

APP_DIR="/opt/network_monitor"
VENV_DIR="$APP_DIR/venv"
APP_PORT=5000
LICENSE_FILE="$APP_DIR/license.key"
LICENSE_VALUE="lorna"   # لایسنس ثابت

if [ "$CHOICE" == "1" ]; then
    echo "[*] نصب بسته‌های سیستمی..."
    apt update
    apt install -y python3 python3-venv python3-pip curl

    echo "[*] ایجاد پوشه برنامه..."
    mkdir -p "$APP_DIR"
    echo "$LICENSE_VALUE" > "$LICENSE_FILE"
    chmod 600 "$LICENSE_FILE"

    echo "[*] ساخت محیط مجازی پایتون..."
    python3 -m venv "$VENV_DIR"
    source "$VENV_DIR/bin/activate"

    echo "[*] نصب پکیج‌های پایتونی..."
    pip install --upgrade pip >/dev/null
    pip install flask psutil >/dev/null

    echo "[*] ایجاد فایل برنامه Flask..."
    cat > "$APP_DIR/app.py" <<'PYEOF'
from flask import Flask, render_template_string, request, redirect, url_for, session, jsonify
import psutil, os, time, threading

app = Flask(__name__)
app.secret_key = 'super_secret_key_lorna_change_me'  # در production این را امن کن

USERNAME = "admin"
PASSWORD = "admin123"
LICENSE_FILE = "/opt/network_monitor/license.key"

prev_net = {'bytes_sent': None, 'bytes_recv': None, 'time': None}
net_lock = threading.Lock()

def verify_license(license_key):
    try:
        if os.path.exists(LICENSE_FILE):
            with open(LICENSE_FILE, 'r') as f:
                stored = f.read().strip()
            return license_key.strip() == stored
        else:
            return license_key.strip() == "lorna"
    except Exception:
        return False

def get_network_speed_mbps():
    with net_lock:
        counters = psutil.net_io_counters()
        cur_sent = counters.bytes_sent
        cur_recv = counters.bytes_recv
        now = time.time()

        if prev_net['time'] is None:
            prev_net['bytes_sent'] = cur_sent
            prev_net['bytes_recv'] = cur_recv
            prev_net['time'] = now
            return 0.0, 0.0

        dt = now - prev_net['time']
        if dt <= 0:
            return 0.0, 0.0

        delta_sent = cur_sent - prev_net['bytes_sent']
        delta_recv = cur_recv - prev_net['bytes_recv']

        prev_net['bytes_sent'] = cur_sent
        prev_net['bytes_recv'] = cur_recv
        prev_net['time'] = now

        up_mbps = (delta_sent * 8) / (dt * 1_000_000)
        down_mbps = (delta_recv * 8) / (dt * 1_000_000)

        return round(up_mbps, 3), round(down_mbps, 3)

login_page = '''
<!doctype html>
<html lang="fa" dir="rtl">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>لورنا — ورود</title>
<link href="https://fonts.googleapis.com/css2?family=Vazirmatn:wght@300;400;600;700&display=swap" rel="stylesheet">
<style>
:root{
  --bg: linear-gradient(135deg,#071026,#0b2b44);
  --card:#07162b;
  --text:#eaf6ff;
  --accent:#06b6d4;
}
*{box-sizing:border-box;font-family:'Vazirmatn',sans-serif}
body{margin:0;min-height:100vh;background:var(--bg);color:var(--text);display:flex;align-items:center;justify-content:center;padding:20px}
.container{width:100%;max-width:1100px;display:grid;grid-template-columns:1fr 420px;gap:28px}
.panel{background:rgba(255,255,255,0.03);padding:28px;border-radius:14px;backdrop-filter:blur(6px)}
.brand{display:flex;gap:12px;align-items:center}
.logo{width:72px;height:72px;border-radius:14px;background:linear-gradient(90deg,var(--accent),#7c3aed);display:flex;align-items:center;justify-content:center;font-weight:700;color:white;font-size:28px}
h1{margin:6px 0}
.features{margin-top:16px;line-height:1.8;color:rgba(234,246,255,0.85)}
.card{background:linear-gradient(180deg,rgba(255,255,255,0.02),rgba(255,255,255,0.01));padding:22px;border-radius:12px}
.field{margin-bottom:12px}
input[type=text],input[type=password]{width:100%;padding:10px;border-radius:8px;border:1px solid rgba(255,255,255,0.06);background:transparent;color:inherit}
button{width:100%;padding:12px;border-radius:10px;border:0;background:linear-gradient(90deg,var(--accent),#7c3aed);color:#051426;font-weight:700;cursor:pointer}
.small{font-size:13px;color:rgba(234,246,255,0.7);margin-top:10px;text-align:center}
.error{background:#ffefef;color:#8b0000;padding:8px;border-radius:8px;margin-bottom:10px}
@media (max-width:960px){.container{grid-template-columns:1fr;}}
</style>
</head>
<body>
<div class="container">
  <div class="panel">
    <div class="brand"><div class="logo">L</div><div><h1>لورنا — پنل مانیتورینگ</h1><div class="small">نظارت لحظه‌ای سیستم و شبکه</div></div></div>
    <div class="features">
      <ul>
        <li>گراف‌های دایره‌ای زیبا برای CPU و RAM</li>
        <li>نمایش سرعت شبکه (آپلود/دانلود) بر حسب Mbps</li>
        <li>تم روشن / تیره / AMOLED — ذخیره در مرورگر</li>
        <li>لایسنس ساده: <strong>lorna</strong></li>
      </ul>
    </div>
  </div>

  <div class="card">
    <h3>ورود به پنل</h3>
    {% if error %}<div class="error">{{ error }}</div>{% endif %}
    <form method="POST">
      <div class="field"><input type="text" name="username" placeholder="نام کاربری" required></div>
      <div class="field"><input type="password" name="password" placeholder="رمز عبور" required></div>
      <div class="field"><input type="text" name="license" placeholder="کد لایسنس (lorna)" required></div>
      <button type="submit">ورود</button>
    </form>
    <div class="small">نام کاربری/رمز پیش‌فرض: <strong>admin / admin123</strong></div>
  </div>
</div>
</body>
</html>
'''

dashboard_page = '''
<!doctype html>
<html lang="fa" dir="rtl">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>لورنا — داشبورد</title>
<link href="https://fonts.googleapis.com/css2?family=Vazirmatn:wght@300;400;600;700&display=swap" rel="stylesheet">
<style>
:root{
  --bg-color:#04102a;
  --card-bg: rgba(255,255,255,0.03);
  --text:#eaf6ff;
  --muted:rgba(234,246,255,0.7);
  --accent:#06b6d4;
}
body{margin:0;font-family:'Vazirmatn',sans-serif;background:linear-gradient(180deg,var(--bg-color),#071b3b);color:var(--text);min-height:100vh}
.header{display:flex;justify-content:space-between;align-items:center;padding:14px 22px;background:var(--card-bg);backdrop-filter:blur(6px)}
.brand{display:flex;align-items:center;gap:12px}
.brand .logo{width:44px;height:44;border-radius:10px;background:linear-gradient(90deg,var(--accent),#7c3aed);display:flex;align-items:center;justify-content:center;font-weight:700}
.controls{display:flex;gap:8px}
button{cursor:pointer;border:none;background:none;color:var(--text);font-weight:600;font-size:14px;padding:6px 14px;border-radius:8px;transition:0.3s ease}
button:hover{background:var(--accent);color:#051426}
main{max-width:1200px;margin:22px auto;padding:0 14px}
.card{background:var(--card-bg);border-radius:12px;padding:20px;margin-bottom:22px;backdrop-filter:blur(6px)}
h2{margin:0 0 14px 0}
#charts{display:grid;grid-template-columns:repeat(auto-fit,minmax(280px,1fr));gap:22px}
#charts > div{background:#0a1a3b;padding:12px;border-radius:12px;text-align:center;color:#ccc}
#theme-toggle{margin-left:10px}
@media (max-width:600px) {
  #charts{grid-template-columns:1fr}
}
</style>
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
</head>
<body>
<header class="header">
  <div class="brand">
    <div class="logo">L</div>
    <h1>پنل مانیتورینگ لورنا</h1>
  </div>
  <div class="controls">
    <button onclick="logout()">خروج</button>
    <button id="theme-toggle">تم روشن</button>
  </div>
</header>
<main>
  <div id="charts">
    <div>
      <h2>استفاده CPU (%)</h2>
      <div id="cpuChart"></div>
    </div>
    <div>
      <h2>استفاده RAM (%)</h2>
      <div id="ramChart"></div>
    </div>
    <div>
      <h2>سرعت شبکه (Mbps)</h2>
      <div>آپلود: <span id="upSpeed">0</span></div>
      <div>دانلود: <span id="downSpeed">0</span></div>
    </div>
  </div>
</main>
<script>
let darkTheme = true;
const toggleBtn = document.getElementById('theme-toggle');
const body = document.body;

function setTheme(dark){
  if(dark){
    body.style.background = "linear-gradient(180deg,#04102a,#071b3b)";
    toggleBtn.textContent = "تم روشن";
  } else {
    body.style.background = "linear-gradient(180deg,#e0e7ff,#bfdbfe)";
    toggleBtn.textContent = "تم تاریک";
  }
  darkTheme = dark;
  localStorage.setItem('lorna_theme', dark ? 'dark' : 'light');
}

toggleBtn.addEventListener('click', ()=>{
  setTheme(!darkTheme);
});

window.onload = () => {
  let savedTheme = localStorage.getItem('lorna_theme');
  if(savedTheme === 'light'){
    setTheme(false);
  } else {
    setTheme(true);
  }
};

function logout(){
  fetch('/logout',{method:'POST'}).then(() => {
    window.location.href = '/login';
  });
}

var cpuChart = new ApexCharts(document.querySelector("#cpuChart"), {
  chart: { type: 'radialBar', height: 180 },
  series: [0],
  labels: ['CPU'],
  colors: ['#06b6d4'],
  plotOptions: {
    radialBar: {
      hollow: { size: '55%' },
      dataLabels: { name: { fontSize: '16px' }, value: { fontSize: '28px' } }
    }
  }
});
cpuChart.render();

var ramChart = new ApexCharts(document.querySelector("#ramChart"), {
  chart: { type: 'radialBar', height: 180 },
  series: [0],
  labels: ['RAM'],
  colors: ['#7c3aed'],
  plotOptions: {
    radialBar: {
      hollow: { size: '55%' },
      dataLabels: { name: { fontSize: '16px' }, value: { fontSize: '28px' } }
    }
  }
});
ramChart.render();

function fetchData(){
  fetch('/api/status').then(res => res.json()).then(data => {
    cpuChart.updateSeries([data.cpu_percent]);
    ramChart.updateSeries([data.ram_percent]);
    document.getElementById('upSpeed').textContent = data.net_upload_mbps;
    document.getElementById('downSpeed').textContent = data.net_download_mbps;
  });
}

setInterval(fetchData, 2000);
fetchData();

</script>
</body>
</html>
'''

@app.route('/login', methods=['GET', 'POST'])
def login():
    error = None
    if request.method == 'POST':
        username = request.form.get('username', '')
        password = request.form.get('password', '')
        license_key = request.form.get('license', '')
        if username == USERNAME and password == PASSWORD and verify_license(license_key):
            session['logged_in'] = True
            return redirect(url_for('dashboard'))
        else:
            error = "نام کاربری، رمز یا لایسنس اشتباه است."
    return render_template_string(login_page, error=error)

@app.route('/logout', methods=['POST'])
def logout():
    session.clear()
    return '', 204

@app.route('/')
def index():
    if not session.get('logged_in'):
        return redirect(url_for('login'))
    return redirect(url_for('dashboard'))

@app.route('/dashboard')
def dashboard():
    if not session.get('logged_in'):
        return redirect(url_for('login'))
    return render_template_string(dashboard_page)

@app.route('/api/status')
def api_status():
    if not session.get('logged_in'):
        return jsonify({'error':'unauthorized'}), 401
    cpu = psutil.cpu_percent(interval=0.5)
    ram = psutil.virtual_memory().percent
    up_mbps, down_mbps = get_network_speed_mbps()
    return jsonify({
        'cpu_percent': cpu,
        'ram_percent': ram,
        'net_upload_mbps': up_mbps,
        'net_download_mbps': down_mbps
    })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
PYEOF

    deactivate

    echo "[*] ایجاد فایل سرویس systemd..."
    cat > /etc/systemd/system/lorna.service <<'SERVICE_EOF'
[Unit]
Description=Lorna Network Monitor Service
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/opt/network_monitor
ExecStart=/opt/network_monitor/venv/bin/python /opt/network_monitor/app.py
Restart=on-failure

[Install]
WantedBy=multi-user.target
SERVICE_EOF

    echo "[*] فعالسازی سرویس..."
    systemctl daemon-reload
    systemctl enable lorna.service
    systemctl start lorna.service

    echo "نصب و راه‌اندازی پنل با موفقیت انجام شد."
    echo "به مرورگر بروید و http://<آدرس_IP_سرور>:$APP_PORT را باز کنید."
    exit 0
fi

if [ "$CHOICE" == "2" ]; then
    echo "[*] حذف پنل..."
    systemctl stop lorna.service 2>/dev/null || true
    systemctl disable lorna.service 2>/dev/null || true
    rm -rf "$APP_DIR"
    rm -f /etc/systemd/system/lorna.service
    systemctl daemon-reload
    echo "پنل و سرویس حذف شدند."
    exit 0
fi

echo "انتخاب نامعتبر است."
exit 1
