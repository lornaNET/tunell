#!/bin/bash
set -e

APP_DIR="/opt/network_monitor"
VENV_DIR="$APP_DIR/venv"
APP_PORT=5000
LICENSE_FILE="$APP_DIR/license.key"
LICENSE_VALUE="lorna"

function print_menu() {
  clear
  echo "=============================="
  echo " پنل مانیتورینگ لورنا - نصب "
  echo "=============================="
  echo "1) نصب پنل"
  echo "2) حذف پنل"
  echo "3) خروج"
  echo "=============================="
  echo -n "انتخاب خود را وارد کنید: "
}

function install_panel() {
  echo "[*] آپدیت مخازن و نصب پیش‌نیازها..."
  apt update
  apt install -y python3 python3-venv python3-pip curl

  echo "[*] ایجاد دایرکتوری برنامه..."
  mkdir -p "$APP_DIR"
  echo "$LICENSE_VALUE" > "$LICENSE_FILE"
  chmod 600 "$LICENSE_FILE"

  echo "[*] ساخت محیط مجازی پایتون..."
  python3 -m venv "$VENV_DIR"
  source "$VENV_DIR/bin/activate"

  echo "[*] نصب پکیج‌های موردنیاز..."
  pip install --upgrade pip >/dev/null
  pip install flask psutil >/dev/null

  echo "[*] ایجاد فایل برنامه Flask..."
  cat > "$APP_DIR/app.py" <<'PYEOF'
from flask import Flask, render_template_string, request, redirect, url_for, session, jsonify
import psutil, os, time, threading

app = Flask(__name__)
app.secret_key = 'super_secret_key_lorna_change_me'

USERNAME = "admin"
PASSWORD = "admin123"
LICENSE_FILE = "/opt/network_monitor/license.key"

prev_net = {'bytes_sent': None, 'bytes_recv': None, 'time': None}
total_net = {'bytes_sent': 0, 'bytes_recv': 0}
net_lock = threading.Lock()

def verify_license(license_key):
    try:
        if os.path.exists(LICENSE_FILE):
            with open(LICENSE_FILE, 'r') as f:
                stored = f.read().strip()
            return license_key.strip() == stored
        else:
            return license_key.strip() == "lorna"
    except Exception:
        return False

def update_network_usage():
    with net_lock:
        counters = psutil.net_io_counters()
        cur_sent = counters.bytes_sent
        cur_recv = counters.bytes_recv
        now = time.time()

        if prev_net['time'] is None:
            prev_net['bytes_sent'] = cur_sent
            prev_net['bytes_recv'] = cur_recv
            prev_net['time'] = now
            return 0.0, 0.0

        dt = now - prev_net['time']
        if dt <= 0:
            return 0.0, 0.0

        delta_sent = cur_sent - prev_net['bytes_sent']
        delta_recv = cur_recv - prev_net['bytes_recv']

        # جمع کل (افزایشی)
        total_net['bytes_sent'] += max(delta_sent, 0)
        total_net['bytes_recv'] += max(delta_recv, 0)

        prev_net['bytes_sent'] = cur_sent
        prev_net['bytes_recv'] = cur_recv
        prev_net['time'] = now

        up_MBps = delta_sent / (1024*1024) / dt
        down_MBps = delta_recv / (1024*1024) / dt

        return round(up_MBps, 4), round(down_MBps, 4)

login_page = '''
<!doctype html>
<html lang="fa" dir="rtl">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>لورنا — ورود</title>
<style>
body {
  font-family: Tahoma, sans-serif;
  background: linear-gradient(135deg,#071026,#0b2b44);
  color: #eaf6ff;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  margin: 0;
}
.container {
  background: rgba(255,255,255,0.05);
  padding: 24px 30px;
  border-radius: 16px;
  box-shadow: 0 0 12px rgba(0,0,0,0.7);
  max-width: 400px;
  width: 100%;
  text-align: center;
}
h1 {
  margin-bottom: 20px;
  font-weight: 600;
}
input[type=text], input[type=password] {
  width: 100%;
  padding: 10px 12px;
  margin: 10px 0 16px 0;
  border-radius: 8px;
  border: none;
  font-size: 16px;
}
button {
  width: 100%;
  padding: 12px 0;
  background: #06b6d4;
  border: none;
  border-radius: 10px;
  font-weight: 700;
  color: #051426;
  cursor: pointer;
  font-size: 18px;
}
.error {
  background: #ffefef;
  color: #8b0000;
  padding: 10px;
  border-radius: 8px;
  margin-bottom: 14px;
}
.small {
  margin-top: 12px;
  color: rgba(234,246,255,0.7);
  font-size: 14px;
}
</style>
</head>
<body>
<div class="container">
  <h1>ورود به پنل لورنا</h1>
  {% if error %}<div class="error">{{ error }}</div>{% endif %}
  <form method="POST">
    <input type="text" name="username" placeholder="نام کاربری" required />
    <input type="password" name="password" placeholder="رمز عبور" required />
    <input type="text" name="license" placeholder="کد لایسنس (lorna)" required />
    <button type="submit">ورود</button>
  </form>
  <div class="small">نام کاربری/رمز پیش‌فرض: <b>admin / admin123</b></div>
</div>
</body>
</html>
'''

dashboard_page = '''
<!doctype html>
<html lang="fa" dir="rtl">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>لورنا — داشبورد</title>
<style>
body {
  font-family: Tahoma, sans-serif;
  margin: 0;
  background: linear-gradient(180deg,#04102a,#071b3b);
  color: #eaf6ff;
  min-height: 100vh;
  direction: rtl;
}
header {
  background: rgba(255,255,255,0.05);
  backdrop-filter: blur(8px);
  padding: 14px 24px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}
h1 {
  margin: 0;
}
button {
  background: none;
  border: none;
  color: #06b6d4;
  font-weight: 600;
  cursor: pointer;
  font-size: 16px;
  border-radius: 8px;
  padding: 6px 14px;
  transition: background-color 0.3s ease;
}
button:hover {
  background: #06b6d4;
  color: #051426;
}
main {
  max-width: 1200px;
  margin: 22px auto;
  padding: 0 18px;
}
.cards {
  display: flex;
  gap: 18px;
  flex-wrap: wrap;
  justify-content: center;
}
.card {
  background: rgba(255,255,255,0.03);
  border-radius: 14px;
  padding: 18px 26px;
  width: 280px;
  box-sizing: border-box;
  text-align: center;
  box-shadow: 0 0 12px rgba(0,0,0,0.3);
}
h2 {
  margin: 10px 0 16px 0;
}
.value {
  font-size: 36px;
  font-weight: 700;
  margin-top: 6px;
  color: #7c3aed;
}
.label {
  margin-top: 8px;
  font-size: 14px;
  color: rgba(234,246,255,0.7);
}
.net-values {
  font-size: 20px;
  font-weight: 600;
  margin: 6px 0 0 0;
  color: #06b6d4;
}
@media (max-width: 600px) {
  .cards {
    flex-direction: column;
    align-items: center;
  }
}
</style>
<script>
function logout() {
  fetch('/logout', {method:'POST'}).then(() => {
    window.location.href = '/login';
  });
}

let cpuChart, ramChart;

function drawRadialBar(id, label, color) {
  const ctx = document.getElementById(id).getContext('2d');
  return new Chart(ctx, {
    type: 'doughnut',
    data: {
      labels: [label],
      datasets: [{
        data: [0, 100],
        backgroundColor: [color, '#2c3e50'],
        borderWidth: 0
      }]
    },
    options: {
      cutout: '70%',
      rotation: -90,
      circumference: 180,
      plugins: {
        tooltip: {enabled: false},
        legend: {display: false}
      }
    }
  });
}

async function fetchData() {
  const res = await fetch('/api/status');
  if (!res.ok) return;
  const data = await res.json();
  document.getElementById('cpuValue').textContent = data.cpu_percent + " %";
  document.getElementById('ramValue').textContent = data.ram_percent + " %";
  document.getElementById('uploadSpeed').textContent = data.net_upload_MBps + " MB/s";
  document.getElementById('downloadSpeed').textContent = data.net_download_MBps + " MB/s";
  document.getElementById('totalUpload').textContent = data.total_upload_MB.toFixed(2) + " MB";
  document.getElementById('totalDownload').textContent = data.total_download_MB.toFixed(2) + " MB";

  // به روزرسانی چارت
  cpuChart.data.datasets[0].data[0] = data.cpu_percent;
  cpuChart.data.datasets[0].data[1] = 100 - data.cpu_percent;
  cpuChart.update();

  ramChart.data.datasets[0].data[0] = data.ram_percent;
  ramChart.data.datasets[0].data[1] = 100 - data.ram_percent;
  ramChart.update();
}

window.onload = () => {
  const ctxCpu = document.getElementById('cpuChart').getContext('2d');
  const ctxRam = document.getElementById('ramChart').getContext('2d');

  cpuChart = new Chart(ctxCpu, {
    type: 'doughnut',
    data: {
      labels: ['CPU'],
      datasets: [{data: [0,100], backgroundColor: ['#06b6d4','#2c3e50'], borderWidth: 0}]
    },
    options: {
      cutout: '70%',
      rotation: -90,
      circumference: 180,
      plugins: {tooltip:false, legend:false}
    }
  });

  ramChart = new Chart(ctxRam, {
    type: 'doughnut',
    data: {
      labels: ['RAM'],
      datasets: [{data: [0,100], backgroundColor: ['#7c3aed','#2c3e50'], borderWidth: 0}]
    },
    options: {
      cutout: '70%',
      rotation: -90,
      circumference: 180,
      plugins: {tooltip:false, legend:false}
    }
  });

  fetchData();
  setInterval(fetchData, 2000);
}
</script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
<header>
  <h1>پنل مانیتورینگ لورنا</h1>
  <button onclick="logout()">خروج</button>
</header>
<main>
  <div class="cards">
    <div class="card">
      <h2>CPU</h2>
      <canvas id="cpuChart" width="140" height="80"></canvas>
      <div class="value" id="cpuValue">0 %</div>
    </div>
    <div class="card">
      <h2>RAM</h2>
      <canvas id="ramChart" width="140" height="80"></canvas>
      <div class="value" id="ramValue">0 %</div>
    </div>
    <div class="card">
      <h2>سرعت شبکه</h2>
      <div class="net-values">آپلود: <span id="uploadSpeed">0 MB/s</span></div>
      <div class="net-values">دانلود: <span id="downloadSpeed">0 MB/s</span></div>
      <div class="net-values label" style="margin-top:12px;">مجموع آپلود: <span id="totalUpload">0 MB</span></div>
      <div class="net-values label">مجموع دانلود: <span id="totalDownload">0 MB</span></div>
    </div>
  </div>
</main>
</body>
</html>
'''

@app.route('/login', methods=['GET', 'POST'])
def login():
    error = None
    if request.method == 'POST':
        username = request.form.get('username','')
        password = request.form.get('password','')
        license_key = request.form.get('license','')
        if username == USERNAME and password == PASSWORD and verify_license(license_key):
            session['logged_in'] = True
            return redirect(url_for('dashboard'))
        else:
            error = "نام کاربری، رمز یا لایسنس اشتباه است."
    return render_template_string(login_page, error=error)

@app.route('/logout', methods=['POST'])
def logout():
    session.clear()
    return '', 204

@app.route('/')
def index():
    if not session.get('logged_in'):
        return redirect(url_for('login'))
    return redirect(url_for('dashboard'))

@app.route('/dashboard')
def dashboard():
    if not session.get('logged_in'):
        return redirect(url_for('login'))
    return render_template_string(dashboard_page)

@app.route('/api/status')
def api_status():
    if not session.get('logged_in'):
        return jsonify({'error':'unauthorized'}), 401

    cpu = psutil.cpu_percent(interval=0.5)
    ram = psutil.virtual_memory().percent
    up_MBps, down_MBps = update_network_usage()
    with net_lock:
        total_up_MB = total_net['bytes_sent'] / (1024*1024)
        total_down_MB = total_net['bytes_recv'] / (1024*1024)

    return jsonify({
        'cpu_percent': cpu,
        'ram_percent': ram,
        'net_upload_MBps': up_MBps,
        'net_download_MBps': down_MBps,
        'total_upload_MB': total_up_MB,
        'total_download_MB': total_down_MB
    })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
PYEOF

  deactivate

  echo "[*] ایجاد فایل سرویس systemd..."
  cat > /etc/systemd/system/lorna.service <<'SERVICE_EOF'
[Unit]
Description=Lorna Network Monitor Service
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=/opt/network_monitor
ExecStart=/opt/network_monitor/venv/bin/python /opt/network_monitor/app.py
Restart=on-failure

[Install]
WantedBy=multi-user.target
SERVICE_EOF

  echo "[*] فعالسازی و شروع سرویس..."
  systemctl daemon-reload
  systemctl enable lorna.service
  systemctl start lorna.service

  echo "نصب و راه‌اندازی پنل با موفقیت انجام شد."
  echo "به مرورگر بروید و http://<آدرس_IP_سرور>:$APP_PORT را باز کنید."
}

function remove_panel() {
  echo "[*] توقف سرویس..."
  systemctl stop lorna.service || true
  systemctl disable lorna.service || true
  echo "[*] حذف فایل‌ها..."
  rm -rf "$APP_DIR"
  rm -f /etc/systemd/system/lorna.service
  systemctl daemon-reload
  echo "پنل و سرویس حذف شدند."
}

while true; do
  print_menu
  read CHOICE
  case $CHOICE in
    1) install_panel; break ;;
    2) remove_panel; break ;;
    3) echo "خروج..."; exit 0 ;;
    *) echo "انتخاب نامعتبر است!"; sleep 1 ;;
  esac
done
