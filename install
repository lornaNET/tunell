#!/bin/bash
set -e

APP_DIR="/opt/network_monitor"
VENV_DIR="$APP_DIR/venv"
APP_PORT=5000
LICENSE_FILE="$APP_DIR/license.key"
LICENSE_VALUE="lorna"

function print_menu() {
  clear
  echo "=============================="
  echo " پنل مانیتورینگ لورنا - نصب "
  echo "=============================="
  echo "1) نصب پنل"
  echo "2) حذف پنل"
  echo "3) خروج"
  echo "=============================="
  echo -n "انتخاب خود را وارد کنید: "
}

function install_panel() {
  echo "[*] آپدیت مخازن و نصب پیش‌نیازها..."
  apt update
  apt install -y python3 python3-venv python3-pip curl

  echo "[*] ایجاد دایرکتوری برنامه..."
  mkdir -p "$APP_DIR"
  echo "$LICENSE_VALUE" > "$LICENSE_FILE"
  chmod 600 "$LICENSE_FILE"

  echo "[*] ساخت محیط مجازی پایتون..."
  python3 -m venv "$VENV_DIR"
  source "$VENV_DIR/bin/activate"

  echo "[*] نصب پکیج‌های موردنیاز..."
  pip install --upgrade pip >/dev/null
  pip install flask psutil netifaces >/dev/null

  echo "[*] ایجاد فایل برنامه Flask..."
  cat > "$APP_DIR/app.py" <<'PYEOF'
from flask import Flask, render_template_string, request, redirect, url_for, session, jsonify
import psutil, os, time, threading, re

app = Flask(__name__)
app.secret_key = 'super_secret_key_lorna_change_me'

USERNAME = "admin"
PASSWORD = "admin123"
LICENSE_FILE = "/opt/network_monitor/license.key"

prev_net = {'bytes_sent': None, 'bytes_recv': None, 'time': None}
total_net = {'bytes_sent': 0, 'bytes_recv': 0}
net_lock = threading.Lock()

tunnel_info = {'ip': None, 'port': None}
prev_tunnel = {'bytes_sent': None, 'bytes_recv': None, 'time': None}
total_tunnel = {'bytes_sent': 0, 'bytes_recv': 0}
tunnel_lock = threading.Lock()

def verify_license(license_key):
    try:
        if os.path.exists(LICENSE_FILE):
            with open(LICENSE_FILE, 'r') as f:
                stored = f.read().strip()
            return license_key.strip() == stored
        else:
            return license_key.strip() == "lorna"
    except Exception:
        return False

def update_network_usage():
    with net_lock:
        counters = psutil.net_io_counters()
        cur_sent = counters.bytes_sent
        cur_recv = counters.bytes_recv
        now = time.time()

        if prev_net['time'] is None:
            prev_net['bytes_sent'] = cur_sent
            prev_net['bytes_recv'] = cur_recv
            prev_net['time'] = now
            return 0.0, 0.0

        dt = now - prev_net['time']
        if dt <= 0:
            return 0.0, 0.0

        delta_sent = cur_sent - prev_net['bytes_sent']
        delta_recv = cur_recv - prev_net['bytes_recv']

        total_net['bytes_sent'] += max(delta_sent, 0)
        total_net['bytes_recv'] += max(delta_recv, 0)

        prev_net['bytes_sent'] = cur_sent
        prev_net['bytes_recv'] = cur_recv
        prev_net['time'] = now

        up_MBps = delta_sent / (1024*1024) / dt
        down_MBps = delta_recv / (1024*1024) / dt

        return round(up_MBps, 4), round(down_MBps, 4)

def update_tunnel_usage():
    ip = tunnel_info.get('ip')
    port = tunnel_info.get('port')

    if not ip or not port:
        return 0.0, 0.0

    with tunnel_lock:
        try:
            # بررسی وجود اینترفیس tun0 و فعال بودنش
            ifaces = psutil.net_if_stats()
            if 'tun0' in ifaces and ifaces['tun0'].isup:
                counters = psutil.net_io_counters(pernic=True).get('tun0')
                if counters:
                    now = time.time()
                    cur_sent = counters.bytes_sent
                    cur_recv = counters.bytes_recv
                    if prev_tunnel['time'] is None:
                        prev_tunnel['bytes_sent'] = cur_sent
                        prev_tunnel['bytes_recv'] = cur_recv
                        prev_tunnel['time'] = now
                        return 0.0, 0.0
                    dt = now - prev_tunnel['time']
                    if dt <= 0:
                        return 0.0, 0.0
                    delta_sent = cur_sent - prev_tunnel['bytes_sent']
                    delta_recv = cur_recv - prev_tunnel['bytes_recv']
                    total_tunnel['bytes_sent'] += max(delta_sent, 0)
                    total_tunnel['bytes_recv'] += max(delta_recv, 0)
                    prev_tunnel['bytes_sent'] = cur_sent
                    prev_tunnel['bytes_recv'] = cur_recv
                    prev_tunnel['time'] = now

                    up_MBps = delta_sent / (1024*1024) / dt
                    down_MBps = delta_recv / (1024*1024) / dt
                    return round(up_MBps, 4), round(down_MBps, 4)
        except Exception:
            return 0.0, 0.0

    return 0.0, 0.0

login_page = '''
<!doctype html>
<html lang="fa" dir="rtl">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>لورنا — ورود</title>
<style>
body {
  font-family: Tahoma, sans-serif;
  background: linear-gradient(135deg,#071026,#0b2b44);
  color: #eaf6ff;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  margin: 0;
}
.container {
  background: rgba(255,255,255,0.05);
  padding: 24px 30px;
  border-radius: 16px;
  box-shadow: 0 0 12px rgba(0,0,0,0.7);
  max-width: 400px;
  width: 100%;
  text-align: center;
}
h1 {
  margin-bottom: 20px;
  font-weight: 600;
}
input[type=text], input[type=password] {
  width: 100%;
  padding: 10px 12px;
  margin: 10px 0 16px 0;
  border-radius: 8px;
  border: none;
  font-size: 16px;
}
button {
  width: 100%;
  padding: 12px 0;
  background: #06b6d4;
  border: none;
  border-radius: 10px;
  font-weight: 700;
  color: #051426;
  cursor: pointer;
  font-size: 18px;
}
.error {
  background: #ffefef;
  color: #8b0000;
  padding: 10px;
  border-radius: 8px;
  margin-bottom: 14px;
}
.small {
  margin-top: 12px;
  color: rgba(234,246,255,0.7);
  font-size: 14px;
}
</style>
</head>
<body>
<div class="container">
  <h1>ورود به پنل لورنا</h1>
  {% if error %}<div class="error">{{ error }}</div>{% endif %}
  <form method="POST">
    <input type="text" name="username" placeholder="نام کاربری" required />
    <input type="password" name="password" placeholder="رمز عبور" required />
    <input type="text" name="license" placeholder="کد لایسنس (lorna)" required />
    <button type="submit">ورود</button>
  </form>
  <div class="small">نام کاربری/رمز پیش‌فرض: <b>admin / admin123</b></div>
</div>
</body>
</html>
'''

dashboard_page = '''
<!doctype html>
<html lang="fa" dir="rtl">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>لورنا — داشبورد</title>
<style>
body {
  font-family: Tahoma, sans-serif;
  margin: 0;
  background: linear-gradient(180deg,#04102a,#071b3b);
  color: #eaf6ff;
  min-height: 100vh;
  direction: rtl;
}
header {
  background: rgba(255,255,255,0.05);
  backdrop-filter: blur(8px);
  padding: 14px 24px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}
h1 {
  margin: 0;
}
button {
  background: none;
  border: none;
  color: #06b6d4;
  font-weight: 600;
  cursor: pointer;
  font-size: 16px;
  border-radius: 8px;
  padding: 6px 14px;
  transition: background-color 0.3s ease;
}
button:hover {
  background: #06b6d4;
  color: #051426;
}
main {
  max-width: 1200px;
  margin: 22px auto;
  padding: 0 18px;
}
.cards {
  display: flex;
  gap: 18px;
  flex-wrap: wrap;
  justify-content: center;
}
.card {
  background: rgba(255,255,255,0.03);
  border-radius: 50%;
  padding: 24px;
  width: 160px;
  height: 160px;
  box-sizing: border-box;
  text-align: center;
  box-shadow: 0 0 12px rgba(0,0,0,0.3);
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}
h2 {
  margin: 10px 0 16px 0;
  font-size: 20px;
}
.value {
  font-size: 36px;
  font-weight: 700;
  color: #7c3aed;
}
.label {
  margin-top: 8px;
  font-size: 14px;
  color: rgba(234,246,255,0.7);
  user-select: none;
}
.net-values {
  font-size: 24px;
  font-weight: 700;
  margin: 6px 0 0 0;
  color: #06b6d4;
  user-select: none;
}
#tunnelForm {
  margin: 24px auto;
  max-width: 400px;
  background: rgba(255,255,255,0.05);
  padding: 18px 24px;
  border-radius: 16px;
  box-shadow: 0 0 12px rgba(0,0,0,0.7);
  color: #eaf6ff;
  display: none;
}
#tunnelForm label {
  display: block;
  margin-bottom: 8px;
}
#tunnelForm input {
  width: 100%;
  padding: 8px 12px;
  margin-bottom: 14px;
  border-radius: 8px;
  border: none;
  font-size: 16px;
  background: rgba(255,255,255,0.1);
  color: #eaf6ff;
}
#tunnelForm button {
  width: 100%;
  padding: 10px 0;
  background: #7c3aed;
  border: none;
  border-radius: 10px;
  font-weight: 700;
  font-size: 18px;
  color: #fff;
  cursor: pointer;
}
footer {
  margin-top: 44px;
  text-align: center;
  font-size: 12px;
  color: rgba(234,246,255,0.5);
  user-select: none;
}

@keyframes pulse {
  0%, 100% { box-shadow: 0 0 10px 4px #7c3aed; }
  50% { box-shadow: 0 0 20px 8px #a78bfa; }
}
.value.pulse {
  animation: pulse 2s infinite;
}
</style>
<script>
function logout() {
  fetch('/logout').then(() => {
    window.location.href = '/';
  });
}
function showTunnelForm() {
  let form = document.getElementById('tunnelForm');
  if(form.style.display === 'none' || form.style.display === '') {
    form.style.display = 'block';
  } else {
    form.style.display = 'none';
  }
}
function setTunnel() {
  const ip = document.getElementById('tunnel_ip').value.trim();
  const port = document.getElementById('tunnel_port').value.trim();
  fetch('/set_tunnel', {
    method: 'POST',
    headers: {'Content-Type': 'application/json'},
    body: JSON.stringify({ip, port})
  }).then(res => res.json()).then(data => {
    alert(data.message);
    if(data.success) {
      document.getElementById('tunnelForm').style.display = 'none';
    }
  });
}
function fetchStats() {
  fetch('/stats').then(res => res.json()).then(data => {
    document.getElementById('net_up').textContent = data.network.upload + ' MB/s';
    document.getElementById('net_down').textContent = data.network.download + ' MB/s';
    document.getElementById('net_total_up').textContent = data.network.total_upload.toFixed(2) + ' MB';
    document.getElementById('net_total_down').textContent = data.network.total_download.toFixed(2) + ' MB';

    document.getElementById('tun_up').textContent = data.tunnel.upload + ' MB/s';
    document.getElementById('tun_down').textContent = data.tunnel.download + ' MB/s';
    document.getElementById('tun_total_up').textContent = data.tunnel.total_upload.toFixed(2) + ' MB';
    document.getElementById('tun_total_down').textContent = data.tunnel.total_download.toFixed(2) + ' MB';
  });
}
setInterval(fetchStats, 2000);
window.onload = fetchStats;
</script>
</head>
<body>
<header>
  <h1>داشبورد مانیتورینگ لورنا</h1>
  <button onclick="logout()">خروج</button>
</header>
<main>
  <div class="cards">
    <div class="card">
      <h2>کل شبکه - آپلود</h2>
      <div class="value pulse" id="net_up">0.0000 MB/s</div>
      <div class="label">آپلود فعلی</div>
      <div class="net-values" id="net_total_up">0.00 MB</div>
      <div class="label">کل آپلود</div>
    </div>
    <div class="card">
      <h2>کل شبکه - دانلود</h2>
      <div class="value pulse" id="net_down">0.0000 MB/s</div>
      <div class="label">دانلود فعلی</div>
      <div class="net-values" id="net_total_down">0.00 MB</div>
      <div class="label">کل دانلود</div>
    </div>
    <div class="card">
      <h2>تونل - آپلود</h2>
      <div class="value pulse" id="tun_up">0.0000 MB/s</div>
      <div class="label">آپلود فعلی</div>
      <div class="net-values" id="tun_total_up">0.00 MB</div>
      <div class="label">کل آپلود</div>
    </div>
    <div class="card">
      <h2>تونل - دانلود</h2>
      <div class="value pulse" id="tun_down">0.0000 MB/s</div>
      <div class="label">دانلود فعلی</div>
      <div class="net-values" id="tun_total_down">0.00 MB</div>
      <div class="label">کل دانلود</div>
    </div>
  </div>

  <button onclick="showTunnelForm()" style="margin:24px auto; display:block; padding:12px 24px; border:none; border-radius:10px; background:#7c3aed; color:#fff; font-weight:700; font-size:16px; cursor:pointer;">تنظیم IP و پورت تونل</button>

  <form id="tunnelForm" onsubmit="event.preventDefault(); setTunnel();">
    <label for="tunnel_ip">IP تونل</label>
    <input type="text" id="tunnel_ip" name="tunnel_ip" placeholder="مثلاً 192.168.1.100" required />
    <label for="tunnel_port">پورت تونل</label>
    <input type="text" id="tunnel_port" name="tunnel_port" placeholder="مثلاً 8080" required />
    <button type="submit">ذخیره</button>
  </form>

</main>
<footer>© 2025 لورنا - تمام حقوق محفوظ است.</footer>
</body>
</html>
'''

@app.route('/', methods=['GET', 'POST'])
def login():
    if 'logged_in' in session and session['logged_in']:
        return redirect('/dashboard')

    error = None
    if request.method == 'POST':
        username = request.form.get('username', '')
        password = request.form.get('password', '')
        license_key = request.form.get('license', '')
        if username == USERNAME and password == PASSWORD:
            if verify_license(license_key):
                session['logged_in'] = True
                return redirect('/dashboard')
            else:
                error = "کد لایسنس اشتباه است."
        else:
            error = "نام کاربری یا رمز عبور اشتباه است."

    return render_template_string(login_page, error=error)

@app.route('/dashboard')
def dashboard():
    if not session.get('logged_in'):
        return redirect('/')
    return render_template_string(dashboard_page)

@app.route('/logout')
def logout():
    session.clear()
    return redirect('/')

@app.route('/set_tunnel', methods=['POST'])
def set_tunnel():
    if not session.get('logged_in'):
        return jsonify({"success": False, "message": "لطفا وارد شوید."})
    data = request.get_json()
    ip = data.get('ip', '').strip()
    port = data.get('port', '').strip()

    # اعتبارسنجی ساده
    ip_pattern = r'^(\d{1,3}\.){3}\d{1,3}$'
    port_pattern = r'^\d{1,5}$'
    if not re.match(ip_pattern, ip):
        return jsonify({"success": False, "message": "IP نامعتبر است."})
    if not re.match(port_pattern, port) or int(port) > 65535:
        return jsonify({"success": False, "message": "پورت نامعتبر است."})

    tunnel_info['ip'] = ip
    tunnel_info['port'] = port
    # ریست آمار تونل
    with tunnel_lock:
        prev_tunnel['bytes_sent'] = None
        prev_tunnel['bytes_recv'] = None
        prev_tunnel['time'] = None
        total_tunnel['bytes_sent'] = 0
        total_tunnel['bytes_recv'] = 0

    return jsonify({"success": True, "message": "تنظیمات تونل ذخیره شد."})

@app.route('/stats')
def stats():
    if not session.get('logged_in'):
        return jsonify({"error": "لطفا وارد شوید."}), 401

    up_net, down_net = update_network_usage()
    up_tun, down_tun = update_tunnel_usage()

    return jsonify({
        "network": {
            "upload": up_net,
            "download": down_net,
            "total_upload": total_net['bytes_sent'] / (1024*1024),
            "total_download": total_net['bytes_recv'] / (1024*1024),
        },
        "tunnel": {
            "upload": up_tun,
            "download": down_tun,
            "total_upload": total_tunnel['bytes_sent'] / (1024*1024),
            "total_download": total_tunnel['bytes_recv'] / (1024*1024),
        }
    })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=APP_PORT)
PYEOF

  echo "[*] ساخت سرویس systemd برای اجرای برنامه..."
  cat > /etc/systemd/system/lorna_monitor.service <<EOF
[Unit]
Description=Lorna Network Monitor
After=network.target

[Service]
User=root
WorkingDirectory=$APP_DIR
ExecStart=$VENV_DIR/bin/python $APP_DIR/app.py
Restart=always

[Install]
WantedBy=multi-user.target
EOF

  echo "[*] فعال‌سازی و اجرای سرویس..."
  systemctl daemon-reload
  systemctl enable lorna_monitor.service
  systemctl start lorna_monitor.service

  echo "نصب با موفقیت انجام شد!"
  echo "برای ورود به پنل به آدرس http://$(hostname -I | awk '{print $1}'):$APP_PORT بروید"
  echo "نام کاربری: admin"
  echo "رمز عبور: admin123"
  echo "کد لایسنس: lorna"
}

function remove_panel() {
  echo "[*] متوقف کردن سرویس..."
  systemctl stop lorna_monitor.service || true
  systemctl disable lorna_monitor.service || true

  echo "[*] حذف فایل‌ها..."
  rm -rf "$APP_DIR"
  rm -f /etc/systemd/system/lorna_monitor.service

  systemctl daemon-reload

  echo "پنل حذف شد."
}

while true; do
  print_menu
  read -r choice
  case $choice in
    1) install_panel ;;
    2) remove_panel ;;
    3) echo "خروج از برنامه..." ; exit 0 ;;
    *) echo "لطفا گزینه معتبر وارد کنید." ; sleep 2 ;;
  esac
done
