#!/bin/bash
set -e

echo "=== نصب پنل مانیتورینگ لورنا PRO (Ubuntu 22.04+) ==="
echo "1) نصب و راه‌اندازی پنل"
echo "2) حذف پنل"
read -p "انتخاب (1 یا 2): " CHOICE

APP_DIR="/opt/network_monitor"
VENV_DIR="$APP_DIR/venv"
APP_PORT=5000
LICENSE_FILE="$APP_DIR/license.key"
LICENSE_VALUE="lorna"

if [ "$CHOICE" == "1" ]; then
    echo "[*] نصب بسته‌های سیستمی..."
    apt update || true
    apt install -y python3 python3-venv python3-pip curl lm-sensors jq

    echo "[*] ایجاد پوشه برنامه..."
    mkdir -p "$APP_DIR"
    echo "$LICENSE_VALUE" > "$LICENSE_FILE"
    chmod 600 "$LICENSE_FILE"

    echo "[*] ساخت محیط مجازی پایتون..."
    python3 -m venv "$VENV_DIR"
    source "$VENV_DIR/bin/activate"

    echo "[*] نصب پکیج‌های پایتونی..."
    pip install --upgrade pip
    pip install flask psutil requests

    echo "[*] ایجاد فایل برنامه Flask (نسخه نهایی)..."
    cat > "$APP_DIR/app.py" <<'PYEOF'
from flask import Flask, render_template_string, request, redirect, url_for, session, jsonify
import psutil, os, time, threading, platform, socket, requests

app = Flask(__name__)
app.secret_key = os.environ.get("LORNA_SECRET", "super_secret_key_lorna_change_me")

USERNAME = "admin"
PASSWORD = "admin123"
LICENSE_FILE = "/opt/network_monitor/license.key"

prev_net = {'bytes_sent': None, 'bytes_recv': None, 'time': None}
net_lock = threading.Lock()

cumulative_data = {
    'internal_upload_bytes': 0,
    'internal_download_bytes': 0,
    'external_upload_bytes': 0,
    'external_download_bytes': 0,
}

def verify_license(license_key):
    try:
        if os.path.exists(LICENSE_FILE):
            with open(LICENSE_FILE, 'r') as f:
                stored = f.read().strip()
            return (license_key or "").strip() == stored
        return (license_key or "").strip() == "lorna"
    except Exception:
        return False

def get_network_io():
    """داده‌های اولیه شبکه"""
    counters = psutil.net_io_counters()
    return counters.bytes_sent, counters.bytes_recv

def get_network_speed_mb():
    """
    محاسبه سرعت آپلود و دانلود (MBps) و جمع‌آوری مقدار تجمعی
    """
    with net_lock:
        cur_sent, cur_recv = get_network_io()
        now = time.time()

        if prev_net['time'] is None:
            prev_net['bytes_sent'] = cur_sent
            prev_net['bytes_recv'] = cur_recv
            prev_net['time'] = now
            return 0.0, 0.0

        dt = now - prev_net['time']
        if dt <= 0:
            return 0.0, 0.0

        delta_sent = cur_sent - prev_net['bytes_sent']
        delta_recv = cur_recv - prev_net['bytes_recv']

        prev_net['bytes_sent'] = cur_sent
        prev_net['bytes_recv'] = cur_recv
        prev_net['time'] = now

        # سرعت MBps
        up_mb = delta_sent / (1024 * 1024) / dt
        down_mb = delta_recv / (1024 * 1024) / dt

        # ذخیره تجمعی (ممکنه برای داخلی/خارجی مجزا بشه در آینده)
        cumulative_data['internal_upload_bytes'] += max(delta_sent, 0)
        cumulative_data['internal_download_bytes'] += max(delta_recv, 0)

        return round(max(up_mb, 0), 3), round(max(down_mb, 0), 3)

def get_external_network_usage():
    """
    بررسی آپلود و دانلود سرور ایران و خارج با استفاده از api ها
    (مثال: استفاده از ipinfo.io برای IP و ترافیک)
    این داده‌ها به صورت نمونه و با یک درخواست تست هستند.
    """

    # اینجا میشه API های بهتری برای ترافیک خارجی تعریف کرد
    # فعلاً فقط IP سرور رو می‌گیریم و کشور رو نمایش میدیم

    try:
        r = requests.get("https://ipinfo.io/json", timeout=3)
        data = r.json()
        ip = data.get("ip", "نامعلوم")
        country = data.get("country", "نامعلوم")
        return ip, country
    except Exception:
        return "نامعلوم", "نامعلوم"

def get_cpu_temp():
    try:
        if hasattr(psutil, "sensors_temperatures"):
            temps = psutil.sensors_temperatures(fahrenheit=False) or {}
            for key in ("coretemp", "k10temp", "acpitz", "cpu_thermal"):
                if key in temps and temps[key]:
                    return max([t.current for t in temps[key] if getattr(t, "current", None) is not None])
            for arr in temps.values():
                if arr:
                    return max([t.current for t in arr if getattr(t, "current", None) is not None])
    except Exception:
        pass
    return None

def get_top_processes(limit=10):
    procs = []
    for p in psutil.process_iter(['pid','name','username','cpu_percent','memory_percent']):
        try:
            info = p.info
            procs.append({
                'pid': info.get('pid'),
                'name': (info.get('name') or '')[:40],
                'user': (info.get('username') or '')[:20],
                'cpu': round(info.get('cpu_percent') or 0.0, 2),
                'mem': round(info.get('memory_percent') or 0.0, 2),
            })
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    top_cpu = sorted(procs, key=lambda x: x['cpu'], reverse=True)[:limit]
    top_mem = sorted(procs, key=lambda x: x['mem'], reverse=True)[:limit]
    return top_cpu, top_mem

# --------- HTML (Login + Dashboard) ---------
login_page = """
<!DOCTYPE html><html lang="fa"><head>
<meta charset="UTF-8"><title>ورود | لورنا PRO</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<style>
body{background:#121212;color:#e0e0e0;font-family:tahoma,iransans,system-ui}
.card{background:#1e1e2f;border-radius:10px;border:none;box-shadow: 0 0 10px #0008;}
.btn-primary{background:#ff4d4d;border:0;transition:0.3s;}
.btn-primary:hover{background:#ff0000;}
.form-control, .form-control:focus{background:#121212;color:#e0e0e0;border:none;border-bottom:2px solid #444;}
.form-control::placeholder{color:#888;}
</style></head><body>
<div class="container" style="max-width:420px; margin-top:80px;">
  <div class="text-center mb-4">
    <h2>پنل مانیتورینگ <b>لورنا PRO</b></h2>
    <p class="text-secondary">ورود به پنل</p>
  </div>
  <div class="card p-4">
    <form method="POST">
      <input class="form-control mb-3" name="username" placeholder="نام کاربری" required autofocus>
      <input type="password" class="form-control mb-3" name="password" placeholder="رمز عبور" required>
      <input class="form-control mb-3" name="license" placeholder="کد لایسنس (lorna)" required>
      <button class="btn btn-primary w-100">ورود</button>
    </form>
    {% if error %}<div class="mt-3 text-danger text-center">{{ error }}</div>{% endif %}
  </div>
</div>
</body></html>
"""

dashboard_page = """
<!DOCTYPE html><html lang="fa" data-theme="dark"><head>
<meta charset="UTF-8">
<title>داشبورد | لورنا PRO</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
:root {
  --bg-dark: #121212;
  --bg-light: #f9f9f9;
  --text-dark: #121212;
  --text-light: #e0e0e0;
  --primary-red: #ff4d4d;
  --primary-blue: #4d94ff;
}
[data-theme="dark"] {
  background-color: var(--bg-dark);
  color: var(--text-light);
}
[data-theme="light"] {
  background-color: var(--bg-light);
  color: var(--text-dark);
}
body {
  font-family: Tahoma, iransans, system-ui;
  margin: 0; padding: 0;
}
.container {
  max-width: 960px;
  padding: 20px;
  margin: auto;
}
.card {
  background: #1e1e2f;
  border-radius: 12px;
  margin-bottom: 20px;
  padding: 15px 20px;
  box-shadow: 0 0 12px #0008;
}
[data-theme="light"] .card {
  background: #fff;
  box-shadow: 0 0 15px #ccc;
  color: var(--text-dark);
}
h2 {
  font-weight: 600;
  margin-bottom: 15px;
}
.btn-toggle-theme {
  cursor: pointer;
  padding: 6px 12px;
  border-radius: 10px;
  border: none;
  font-weight: 600;
  background: var(--primary-blue);
  color: #fff;
  margin-bottom: 15px;
  transition: background-color 0.3s;
}
.btn-toggle-theme:hover {
  background: var(--primary-red);
}
table {
  width: 100%;
  color: inherit;
  border-collapse: collapse;
}
th, td {
  padding: 8px 12px;
  text-align: left;
  border-bottom: 1px solid #444;
}
[data-theme="light"] th, [data-theme="light"] td {
  border-color: #ddd;
}
small.text-muted {
  color: #aaa;
}
.chart-container {
  width: 100%;
  max-width: 460px;
  margin: 20px auto;
}
</style>
</head><body>
<div class="container">
  <div class="d-flex justify-content-between align-items-center">
    <h2>داشبورد مانیتورینگ <b>لورنا PRO</b></h2>
    <button class="btn-toggle-theme" id="toggleThemeBtn">تغییر حالت روشن/تاریک</button>
  </div>

  <div class="card">
    <h4>وضعیت سرور</h4>
    <table>
      <tr><th>مقدار</th><th>پارامتر</th></tr>
      <tr><td>{{hostname}}</td><td>نام میزبان (Hostname)</td></tr>
      <tr><td>{{platform}}</td><td>سیستم‌عامل</td></tr>
      <tr><td>{{cpu_count}}</td><td>تعداد هسته CPU</td></tr>
      <tr><td>{{cpu_temp}} °C</td><td>دمای CPU</td></tr>
      <tr><td>{{uptime}}</td><td>زمان بالا بودن سرور</td></tr>
      <tr><td>{{external_ip}} ({{external_country}})</td><td>IP خارجی و کشور</td></tr>
    </table>
  </div>

  <div class="card">
    <h4>مصرف CPU و RAM</h4>
    <canvas id="cpuChart" height="180"></canvas>
    <canvas id="ramChart" height="180" style="margin-top:30px;"></canvas>
  </div>

  <div class="card">
    <h4>سرعت شبکه (آپلود / دانلود) MB/s</h4>
    <div class="d-flex justify-content-around">
      <div>
        <h5>سرعت فعلی</h5>
        <p>آپلود: <span id="netUp">0.00</span> MB/s</p>
        <p>دانلود: <span id="netDown">0.00</span> MB/s</p>
      </div>
      <div>
        <h5>حجم تجمعی (MB)</h5>
        <p>آپلود: <span id="cumuUp">0.00</span> MB</p>
        <p>دانلود: <span id="cumuDown">0.00</span> MB</p>
      </div>
    </div>
  </div>

  <div class="card">
    <h4>پردازش‌ها برتر</h4>
    <div class="row">
      <div class="col-md-6">
        <h5>بیشترین مصرف CPU</h5>
        <table id="topCpu" class="table table-sm table-striped">
          <thead><tr><th>نام</th><th>PID</th><th>کاربر</th><th>%CPU</th></tr></thead>
          <tbody></tbody>
        </table>
      </div>
      <div class="col-md-6">
        <h5>بیشترین مصرف RAM</h5>
        <table id="topMem" class="table table-sm table-striped">
          <thead><tr><th>نام</th><th>PID</th><th>کاربر</th><th>%RAM</th></tr></thead>
          <tbody></tbody>
        </table>
      </div>
    </div>
  </div>
</div>

<script>
let theme = localStorage.getItem("theme") || "dark";
document.documentElement.setAttribute("data-theme", theme);

document.getElementById("toggleThemeBtn").addEventListener("click", () => {
  theme = theme === "dark" ? "light" : "dark";
  document.documentElement.setAttribute("data-theme", theme);
  localStorage.setItem("theme", theme);
});

const cpuCtx = document.getElementById('cpuChart').getContext('2d');
const ramCtx = document.getElementById('ramChart').getContext('2d');

const cpuChart = new Chart(cpuCtx, {
    type: 'doughnut',
    data: {
        labels: ['استفاده CPU', 'باقی‌مانده'],
        datasets: [{
            data: [0, 100],
            backgroundColor: ['#ff4d4d', '#444'],
            borderWidth: 0
        }]
    },
    options: {
        cutout: '70%',
        plugins: {legend: {display: false}},
        animation: {duration: 500}
    }
});

const ramChart = new Chart(ramCtx, {
    type: 'doughnut',
    data: {
        labels: ['استفاده RAM', 'باقی‌مانده'],
        datasets: [{
            data: [0, 100],
            backgroundColor: ['#4d94ff', '#444'],
            borderWidth: 0
        }]
    },
    options: {
        cutout: '70%',
        plugins: {legend: {display: false}},
        animation: {duration: 500}
    }
});

function updateDashboard() {
    fetch('/api/stats').then(r => r.json()).then(data => {
        cpuChart.data.datasets[0].data = [data.cpu_percent, 100 - data.cpu_percent];
        cpuChart.update();

        ramChart.data.datasets[0].data = [data.ram_percent, 100 - data.ram_percent];
        ramChart.update();

        document.getElementById('netUp').textContent = data.net_upload.toFixed(2);
        document.getElementById('netDown').textContent = data.net_download.toFixed(2);
        document.getElementById('cumuUp').textContent = (data.cumu_upload_bytes / (1024*1024)).toFixed(2);
        document.getElementById('cumuDown').textContent = (data.cumu_download_bytes / (1024*1024)).toFixed(2);

        // جدول CPU
        let cpuTableBody = document.querySelector("#topCpu tbody");
        cpuTableBody.innerHTML = "";
        data.top_cpu.forEach(p => {
            cpuTableBody.innerHTML += `<tr>
                <td>${p.name}</td><td>${p.pid}</td><td>${p.user}</td><td>${p.cpu.toFixed(2)}</td>
            </tr>`;
        });

        // جدول RAM
        let memTableBody = document.querySelector("#topMem tbody");
        memTableBody.innerHTML = "";
        data.top_mem.forEach(p => {
            memTableBody.innerHTML += `<tr>
                <td>${p.name}</td><td>${p.pid}</td><td>${p.user}</td><td>${p.mem.toFixed(2)}</td>
            </tr>`;
        });
    });
}

updateDashboard();
setInterval(updateDashboard, 3000);

</script>
</body></html>
"""

from flask import render_template_string

@app.route('/', methods=['GET', 'POST'])
def login():
    if session.get("logged_in"):
        return redirect(url_for("dashboard"))

    error = None
    if request.method == 'POST':
        user = request.form.get("username", "")
        passwd = request.form.get("password", "")
        license_key = request.form.get("license", "")

        if user == USERNAME and passwd == PASSWORD and verify_license(license_key):
            session["logged_in"] = True
            return redirect(url_for("dashboard"))
        else:
            error = "نام کاربری، رمز عبور یا لایسنس اشتباه است."

    return render_template_string(login_page, error=error)

@app.route('/dashboard')
def dashboard():
    if not session.get("logged_in"):
        return redirect(url_for("login"))

    hostname = socket.gethostname()
    platform_str = platform.platform()
    cpu_count = psutil.cpu_count()
    cpu_temp = get_cpu_temp() or "نامعلوم"

    uptime_seconds = time.time() - psutil.boot_time()
    uptime_str = time.strftime("%H:%M:%S", time.gmtime(uptime_seconds))

    external_ip, external_country = get_external_network_usage()

    return render_template_string(dashboard_page,
                                  hostname=hostname,
                                  platform=platform_str,
                                  cpu_count=cpu_count,
                                  cpu_temp=cpu_temp,
                                  uptime=uptime_str,
                                  external_ip=external_ip,
                                  external_country=external_country)

@app.route('/api/stats')
def api_stats():
    if not session.get("logged_in"):
        return jsonify({"error": "unauthorized"}), 401

    cpu_percent = psutil.cpu_percent(interval=0.2)
    ram_percent = psutil.virtual_memory().percent

    net_up, net_down = get_network_speed_mb()
    cumu_up = cumulative_data['internal_upload_bytes']
    cumu_down = cumulative_data['internal_download_bytes']

    top_cpu, top_mem = get_top_processes(limit=10)

    return jsonify({
        "cpu_percent": cpu_percent,
        "ram_percent": ram_percent,
        "net_upload": net_up,
        "net_download": net_down,
        "cumu_upload_bytes": cumu_up,
        "cumu_download_bytes": cumu_down,
        "top_cpu": top_cpu,
        "top_mem": top_mem,
    })

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login'))

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=APP_PORT)
PYEOF

    echo "[*] تنظیم دسترسی‌ها..."
    chmod 700 "$APP_DIR/app.py"

    echo "[*] ایجاد سرویس systemd"
    cat > /etc/systemd/system/lorna-monitor.service <<EOF
[Unit]
Description=Lorna PRO Network Monitor
After=network.target

[Service]
User=root
WorkingDirectory=$APP_DIR
ExecStart=$VENV_DIR/bin/python3 $APP_DIR/app.py
Restart=always

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    systemctl enable lorna-monitor.service
    systemctl restart lorna-monitor.service

    echo "[+] نصب کامل شد."
    echo "مرورگر را باز کنید و به آدرس http://localhost:$APP_PORT مراجعه کنید."
    echo "نام کاربری: admin"
    echo "رمز عبور: admin123"
    echo "کد لایسنس: lorna"

elif [ "$CHOICE" == "2" ]; then
    echo "[*] متوقف کردن سرویس..."
    systemctl stop lorna-monitor.service || true
    systemctl disable lorna-monitor.service || true
    rm -f /etc/systemd/system/lorna-monitor.service
    systemctl daemon-reload
    echo "[*] حذف فایل‌ها..."
    rm -rf "$APP_DIR"
    echo "[+] پنل حذف شد."
else
    echo "انتخاب نامعتبر."
fi
