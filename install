#!/bin/bash
set -e

APP_DIR="/opt/network_monitor"
VENV_DIR="$APP_DIR/venv"
LICENSE_FILE="$APP_DIR/license.key"
LICENSE_VALUE="lorna"
APP_PORT=5000  # default, but can be changed in install

function print_menu() {
  clear
  echo "=============================="
  echo " Lorna Network Monitor Panel "
  echo "=============================="
  echo "1) Install Panel"
  echo "2) Remove Panel"
  echo "3) Exit"
  echo "=============================="
  echo -n "Enter your choice: "
}

function install_panel() {
  echo -n "Enter the port for the panel [default: 5000]: "
  read -r input_port

  if [[ -n "$input_port" ]]; then
    if ! [[ "$input_port" =~ ^[0-9]+$ ]] || [ "$input_port" -lt 1 ] || [ "$input_port" -gt 65535 ]; then
      echo "Invalid port number. Using default port 5000."
      APP_PORT=5000
    else
      APP_PORT=$input_port
    fi
  else
    APP_PORT=5000
  fi

  echo "[*] Updating repositories and installing dependencies..."
  apt update
  apt install -y python3 python3-venv python3-pip curl >/dev/null

  echo "[*] Creating application directory..."
  mkdir -p "$APP_DIR"
  echo "$LICENSE_VALUE" > "$LICENSE_FILE"
  chmod 600 "$LICENSE_FILE"

  echo "[*] Creating Python virtual environment..."
  python3 -m venv "$VENV_DIR"
  source "$VENV_DIR/bin/activate"

  echo "[*] Installing required Python packages..."
  pip install --upgrade pip >/dev/null
  pip install flask psutil netifaces >/dev/null

  echo "[*] Creating Flask application file..."

  # Use a here-doc with variable substitution for APP_PORT
  cat > "$APP_DIR/app.py" <<PYEOF
from flask import Flask, render_template_string, request, redirect, session, jsonify
import psutil, os, time, threading, re

app = Flask(__name__)
app.secret_key = 'super_secret_key_lorna_change_me'

USERNAME = "admin"
PASSWORD = "admin123"
LICENSE_FILE = "$LICENSE_FILE"
APP_PORT = $APP_PORT

prev_net = {'bytes_sent': None, 'bytes_recv': None, 'time': None}
total_net = {'bytes_sent': 0, 'bytes_recv': 0}
net_lock = threading.Lock()

tunnel_info = {'ip': None, 'port': None}
prev_tunnel = {'bytes_sent': None, 'bytes_recv': None, 'time': None}
total_tunnel = {'bytes_sent': 0, 'bytes_recv': 0}
tunnel_lock = threading.Lock()

def verify_license(license_key):
    try:
        if os.path.exists(LICENSE_FILE):
            with open(LICENSE_FILE, 'r') as f:
                stored = f.read().strip()
            return license_key.strip() == stored
        else:
            return license_key.strip() == "lorna"
    except Exception:
        return False

def update_network_usage():
    with net_lock:
        counters = psutil.net_io_counters()
        cur_sent = counters.bytes_sent
        cur_recv = counters.bytes_recv
        now = time.time()

        if prev_net['time'] is None:
            prev_net['bytes_sent'] = cur_sent
            prev_net['bytes_recv'] = cur_recv
            prev_net['time'] = now
            return 0.0, 0.0

        dt = now - prev_net['time']
        if dt <= 0:
            return 0.0, 0.0

        delta_sent = cur_sent - prev_net['bytes_sent']
        delta_recv = cur_recv - prev_net['bytes_recv']

        total_net['bytes_sent'] += max(delta_sent, 0)
        total_net['bytes_recv'] += max(delta_recv, 0)

        prev_net['bytes_sent'] = cur_sent
        prev_net['bytes_recv'] = cur_recv
        prev_net['time'] = now

        up_MBps = delta_sent / (1024*1024) / dt
        down_MBps = delta_recv / (1024*1024) / dt

        return round(up_MBps, 4), round(down_MBps, 4)

def update_tunnel_usage():
    ip = tunnel_info.get('ip')
    port = tunnel_info.get('port')

    if not ip or not port:
        return 0.0, 0.0

    with tunnel_lock:
        try:
            ifaces = psutil.net_if_stats()
            if 'tun0' in ifaces and ifaces['tun0'].isup:
                counters = psutil.net_io_counters(pernic=True).get('tun0')
                if counters:
                    now = time.time()
                    cur_sent = counters.bytes_sent
                    cur_recv = counters.bytes_recv
                    if prev_tunnel['time'] is None:
                        prev_tunnel['bytes_sent'] = cur_sent
                        prev_tunnel['bytes_recv'] = cur_recv
                        prev_tunnel['time'] = now
                        return 0.0, 0.0
                    dt = now - prev_tunnel['time']
                    if dt <= 0:
                        return 0.0, 0.0
                    delta_sent = cur_sent - prev_tunnel['bytes_sent']
                    delta_recv = cur_recv - prev_tunnel['bytes_recv']
                    total_tunnel['bytes_sent'] += max(delta_sent, 0)
                    total_tunnel['bytes_recv'] += max(delta_recv, 0)
                    prev_tunnel['bytes_sent'] = cur_sent
                    prev_tunnel['bytes_recv'] = cur_recv
                    prev_tunnel['time'] = now

                    up_MBps = delta_sent / (1024*1024) / dt
                    down_MBps = delta_recv / (1024*1024) / dt
                    return round(up_MBps, 4), round(down_MBps, 4)
        except Exception:
            return 0.0, 0.0

    return 0.0, 0.0

login_page = '''
<!doctype html>
<html lang="en" dir="ltr">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Lorna — Login</title>
<style>
body {
  font-family: Tahoma, sans-serif;
  background: linear-gradient(135deg,#071026,#0b2b44);
  color: #eaf6ff;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  margin: 0;
}
.container {
  background: rgba(255,255,255,0.05);
  padding: 24px 30px;
  border-radius: 16px;
  box-shadow: 0 0 12px rgba(0,0,0,0.7);
  max-width: 400px;
  width: 100%;
  text-align: center;
}
h1 {
  margin-bottom: 20px;
  font-weight: 600;
}
input[type=text], input[type=password] {
  width: 100%;
  padding: 10px 12px;
  margin: 10px 0 16px 0;
  border-radius: 8px;
  border: none;
  font-size: 16px;
}
button {
  width: 100%;
  padding: 12px 0;
  background: #06b6d4;
  border: none;
  border-radius: 10px;
  font-weight: 700;
  color: #051426;
  cursor: pointer;
  font-size: 18px;
}
.error {
  background: #ffefef;
  color: #8b0000;
  padding: 10px;
  border-radius: 8px;
  margin-bottom: 14px;
}
.small {
  margin-top: 12px;
  color: rgba(234,246,255,0.7);
  font-size: 14px;
}
</style>
</head>
<body>
<div class="container">
  <h1>Login to Lorna Panel</h1>
  {% if error %}<div class="error">{{ error }}</div>{% endif %}
  <form method="POST">
    <input type="text" name="username" placeholder="Username" required />
    <input type="password" name="password" placeholder="Password" required />
    <input type="text" name="license" placeholder="License Key (lorna)" required />
    <button type="submit">Login</button>
  </form>
  <div class="small">Default username/password: <b>admin / admin123</b></div>
</div>
</body>
</html>
'''

dashboard_page = '''
<!doctype html>
<html lang="en" dir="ltr">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Lorna — Dashboard</title>
<style>
body {
  font-family: Tahoma, sans-serif;
  margin: 0;
  background: linear-gradient(180deg,#04102a,#071b3b);
  color: #eaf6ff;
  min-height: 100vh;
  direction: ltr;
}
header {
  background: rgba(255,255,255,0.05);
  backdrop-filter: blur(8px);
  padding: 14px 24px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}
h1 {
  margin: 0;
}
button {
  background: none;
  border: none;
  color: #06b6d4;
  font-weight: 600;
  cursor: pointer;
  font-size: 16px;
  border-radius: 8px;
  padding: 6px 10px;
  transition: background 0.3s ease;
}
button:hover {
  background: rgba(6,182,212,0.2);
}
.main {
  padding: 20px 24px;
  max-width: 960px;
  margin: 0 auto;
}
.stats {
  display: flex;
  gap: 24px;
  flex-wrap: wrap;
}
.card {
  background: rgba(255,255,255,0.05);
  border-radius: 16px;
  padding: 20px;
  flex: 1 1 200px;
  box-shadow: 0 0 10px rgba(6,182,212,0.3);
  min-width: 200px;
}
.card h2 {
  margin-top: 0;
  font-weight: 600;
  font-size: 22px;
}
.card p {
  margin: 6px 0 0 0;
  font-size: 16px;
}
</style>
<script>
async function fetchStats() {
  try {
    const response = await fetch('/api/stats');
    if (!response.ok) {
      throw new Error('Failed to fetch stats');
    }
    const data = await response.json();
    document.getElementById('net-up').textContent = data.network_upload + ' MB/s';
    document.getElementById('net-down').textContent = data.network_download + ' MB/s';
    document.getElementById('tun-up').textContent = data.tunnel_upload + ' MB/s';
    document.getElementById('tun-down').textContent = data.tunnel_download + ' MB/s';
  } catch (e) {
    console.error(e);
  }
}

setInterval(fetchStats, 3000);
window.onload = fetchStats;
</script>
</head>
<body>
<header>
  <h1>Lorna Network Monitor Dashboard</h1>
  <form action="/logout" method="POST" style="margin:0;">
    <button type="submit">Logout</button>
  </form>
</header>
<main class="main">
  <div class="stats">
    <div class="card">
      <h2>Network Usage</h2>
      <p>Upload: <span id="net-up">0.0000</span></p>
      <p>Download: <span id="net-down">0.0000</span></p>
    </div>
    <div class="card">
      <h2>Tunnel Usage (tun0)</h2>
      <p>Upload: <span id="tun-up">0.0000</span></p>
      <p>Download: <span id="tun-down">0.0000</span></p>
    </div>
  </div>
</main>
</body>
</html>
'''

@app.route('/', methods=['GET', 'POST'])
def login():
    if 'logged_in' in session and session['logged_in']:
        return redirect('/dashboard')

    error = None
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        license_key = request.form.get('license')

        if not verify_license(license_key):
            error = "Invalid license key."
        elif username == USERNAME and password == PASSWORD:
            session['logged_in'] = True
            return redirect('/dashboard')
        else:
            error = "Invalid username or password."

    return render_template_string(login_page, error=error)

@app.route('/dashboard')
def dashboard():
    if 'logged_in' not in session or not session['logged_in']:
        return redirect('/')
    return render_template_string(dashboard_page)

@app.route('/api/stats')
def api_stats():
    if 'logged_in' not in session or not session['logged_in']:
        return jsonify({'error': 'Unauthorized'}), 401
    net_up, net_down = update_network_usage()
    tun_up, tun_down = update_tunnel_usage()
    return jsonify({
        'network_upload': net_up,
        'network_download': net_down,
        'tunnel_upload': tun_up,
        'tunnel_download': tun_down,
    })

@app.route('/logout', methods=['POST'])
def logout():
    session.clear()
    return redirect('/')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=APP_PORT)
PYEOF

  deactivate

  echo "[*] Creating systemd service..."

  cat > /etc/systemd/system/lorna.service <<EOF
[Unit]
Description=Lorna Network Monitor Panel
After=network.target

[Service]
User=root
WorkingDirectory=$APP_DIR
ExecStart=$VENV_DIR/bin/python $APP_DIR/app.py
Restart=always

[Install]
WantedBy=multi-user.target
EOF

  echo "[*] Enabling and starting the service..."
  systemctl daemon-reload
  systemctl enable lorna.service
  systemctl restart lorna.service

  echo "Installation complete! Access your panel at: http://your_server_ip:$APP_PORT"
}

function remove_panel() {
  echo "[*] Stopping and disabling service..."
  systemctl stop lorna.service || true
  systemctl disable lorna.service || true

  echo "[*] Removing service file..."
  rm -f /etc/systemd/system/lorna.service

  echo "[*] Removing application files..."
  rm -rf "$APP_DIR"

  echo "[*] Reloading systemd daemon..."
  systemctl daemon-reload

  echo "Removal complete."
}

while true; do
  print_menu
  read -r choice
  case $choice in
    1)
      install_panel
      read -p "Press Enter to continue..."
      ;;
    2)
      remove_panel
      read -p "Press Enter to continue..."
      ;;
    3)
      echo "Goodbye!"
      exit 0
      ;;
    *)
      echo "Invalid option. Try again."
      read -p "Press Enter to continue..."
      ;;
  esac
done
