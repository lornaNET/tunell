#!/bin/bash
set -e

APP_DIR="/opt/lorna"
VENV_DIR="$APP_DIR/venv"
CONFIG_FILE="$APP_DIR/config.ini"
LICENSE_FILE="$APP_DIR/license.key"

echo "---- Lorna Panel Installer ----"

# دکمه‌های عملیات نصب / حذف / تغییر
echo "Please enter:"
read -p "Panel port [default: 5000]: " APP_PORT
APP_PORT=${APP_PORT:-5000}
if ! [[ "$APP_PORT" =~ ^[0-9]+$ ]] || [ "$APP_PORT" -lt 1 ] || [ "$APP_PORT" -gt 65535 ]; then
  echo "Invalid port. Using 5000."
  APP_PORT=5000
fi

read -p "Login username [default: admin]: " USERNAME
USERNAME=${USERNAME:-admin}

read -p "Login password [default: admin123]: " PASSWORD
PASSWORD=${PASSWORD:-admin123}

# نصب پیش‌نیازها
echo "[*] Updating package lists..."
apt update -y

echo "[*] Installing dependencies..."
apt install -y python3 python3-venv python3-pip curl >/dev/null

mkdir -p "$APP_DIR"
chmod 700 "$APP_DIR"

# ذخیره لایسنس
echo "lorna" > "$LICENSE_FILE"
chmod 600 "$LICENSE_FILE"

echo "[*] Creating Python virtual environment..."
python3 -m venv "$VENV_DIR"

echo "[*] Installing Python packages..."
source "$VENV_DIR/bin/activate"
pip install --upgrade pip >/dev/null
pip install flask psutil netifaces configparser >/dev/null
deactivate

# ذخیره کانفیگ پیش‌فرض
cat > "$CONFIG_FILE" <<EOF
[panel]
port=$APP_PORT
username=$USERNAME
password=$PASSWORD

[tunnel]
iran_ip=185.79.160.0
iran_port=1080
EOF
chmod 600 "$CONFIG_FILE"

# نوشتن برنامه Flask

cat > "$APP_DIR/app.py" <<'EOF'
import os
import threading
import time
import psutil
import subprocess
from flask import Flask, render_template_string, request, session, redirect, jsonify
import configparser

app = Flask(__name__)
app.secret_key = os.urandom(24)

CONFIG_PATH = "/opt/lorna/config.ini"
LICENSE_FILE = "/opt/lorna/license.key"

config = configparser.ConfigParser()
config.read(CONFIG_PATH)

# خواندن تنظیمات اولیه
APP_PORT = int(config.get('panel', 'port', fallback='5000'))
USERNAME = config.get('panel', 'username', fallback='admin')
PASSWORD = config.get('panel', 'password', fallback='admin123')

IRAN_IP = config.get('tunnel', 'iran_ip', fallback='185.79.160.0')
IRAN_PORT = config.getint('tunnel', 'iran_port', fallback=1080)

prev_tunnel = {'bytes_sent': None, 'bytes_recv': None, 'time': None}
total_tunnel = {'bytes_sent': 0, 'bytes_recv': 0}
tunnel_lock = threading.Lock()

def save_config():
    with open(CONFIG_PATH, 'w') as f:
        config.write(f)

def verify_license():
    try:
        if os.path.exists(LICENSE_FILE):
            with open(LICENSE_FILE, 'r') as f:
                stored = f.read().strip()
            return stored == "lorna"
        else:
            return False
    except:
        return False

def get_xray_connected_users():
    # فرض: گرفتن تعداد کانکشن‌های متصل روی پورت IRAN_PORT
    try:
        # از ss استفاده می‌کنیم برای تعداد کانکشن tcp روی پورت ایران
        result = subprocess.run(['ss','-tn', f'dst', 'sport = :{IRAN_PORT}'], capture_output=True, text=True)
        lines = result.stdout.strip().split('\n')
        # خط اول header است
        count = max(0, len(lines) - 1)
        return count
    except Exception:
        return 0

def update_tunnel_usage():
    with tunnel_lock:
        try:
            ifaces = psutil.net_if_stats()
            # فرض می‌کنیم نام اینترفیس تونل tun0 است
            if 'tun0' in ifaces and ifaces['tun0'].isup:
                counters = psutil.net_io_counters(pernic=True).get('tun0')
                if counters:
                    now = time.time()
                    cur_sent = counters.bytes_sent
                    cur_recv = counters.bytes_recv
                    if prev_tunnel['time'] is None:
                        prev_tunnel['bytes_sent'] = cur_sent
                        prev_tunnel['bytes_recv'] = cur_recv
                        prev_tunnel['time'] = now
                        return 0.0, 0.0, total_tunnel['bytes_sent'], total_tunnel['bytes_recv']
                    dt = now - prev_tunnel['time']
                    if dt <= 0:
                        return 0.0, 0.0, total_tunnel['bytes_sent'], total_tunnel['bytes_recv']
                    delta_sent = cur_sent - prev_tunnel['bytes_sent']
                    delta_recv = cur_recv - prev_tunnel['bytes_recv']
                    total_tunnel['bytes_sent'] += max(delta_sent, 0)
                    total_tunnel['bytes_recv'] += max(delta_recv, 0)
                    prev_tunnel['bytes_sent'] = cur_sent
                    prev_tunnel['bytes_recv'] = cur_recv
                    prev_tunnel['time'] = now

                    up_MBps = delta_sent / (1024*1024) / dt
                    down_MBps = delta_recv / (1024*1024) / dt
                    return round(up_MBps, 4), round(down_MBps, 4), total_tunnel['bytes_sent'], total_tunnel['bytes_recv']
        except Exception:
            return 0.0, 0.0, total_tunnel['bytes_sent'], total_tunnel['bytes_recv']
    return 0.0, 0.0, total_tunnel['bytes_sent'], total_tunnel['bytes_recv']

def get_cpu_ram_usage():
    cpu = psutil.cpu_percent(interval=0.5)
    ram = psutil.virtual_memory().percent
    return cpu, ram

# دکمه‌های بیرونی نصب/حذف/تغییر پسورد/تغییر پورت لینک میشه به اسکریپت bash که خودت داری
main_page = '''
<!doctype html>
<html lang="fa" dir="rtl">
<head>
<meta charset="utf-8" />
<title>Lorna Panel - مدیریت</title>
<style>
  body { font-family: Tahoma, sans-serif; background:#071b3b; color:#eaf6ff; text-align:center; padding:40px;}
  h1 { margin-bottom: 40px; }
  button { background:#06b6d4; border:none; padding:15px 30px; font-size:18px; margin:10px; color:#fff; border-radius:10px; cursor:pointer; transition:0.3s; }
  button:hover { background:#028ea3; }
  form { margin-top: 20px; }
  input { padding: 8px; font-size: 16px; border-radius: 8px; border:none; width: 200px; margin: 0 10px; }
</style>
</head>
<body>
  <h1>پنل مدیریت Lorna</h1>

  <div>
    <button onclick="window.location.href='https://yourserver.com/install.sh'">نصب پنل</button>
    <button onclick="window.location.href='https://yourserver.com/remove.sh'">حذف پنل</button>
    <button onclick="window.location.href='https://yourserver.com/change_pass.sh'">تغییر پسورد</button>
    <button onclick="window.location.href='https://yourserver.com/change_port.sh'">تغییر پورت</button>
  </div>

  <hr style="margin:40px 0; border-color:#06b6d4;" />

  <h2>ورود به داشبورد</h2>
  <form method="POST" action="/login">
    <input type="text" name="username" placeholder="نام کاربری" required autofocus />
    <input type="password" name="password" placeholder="رمز عبور" required />
    <button type="submit">ورود</button>
  </form>
</body>
</html>
'''

login_error_page = '''
<!doctype html>
<html lang="fa" dir="rtl">
<head>
<meta charset="utf-8" />
<title>خطا در ورود</title>
<style>body { font-family: Tahoma, sans-serif; background:#071b3b; color:#f66; text-align:center; padding:40px; }</style>
</head>
<body>
  <h1>نام کاربری یا رمز عبور اشتباه است</h1>
  <a href="/">بازگشت به صفحه اصلی</a>
</body>
</html>
'''

dashboard_page = '''
<!doctype html>
<html lang="fa" dir="rtl">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>داشبورد Lorna</title>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
  body { font-family: Tahoma, sans-serif; background: linear-gradient(180deg,#04102a,#071b3b); color: #eaf6ff; margin: 0; padding: 20px; direction: rtl; }
  header { display: flex; justify-content: space-between; align-items: center; background: rgba(255,255,255,0.05); padding: 15px 20px; border-radius: 12px; }
  h1 { margin: 0; }
  button.logout { background: #d4626a; border:none; color:#fff; padding: 8px 15px; border-radius: 8px; cursor:pointer; font-weight: 600; }
  .container { max-width: 1000px; margin: 20px auto; }
  .circle-container { display: flex; justify-content: space-around; flex-wrap: wrap; gap: 20px; margin-top: 40px; }
  .circle-card { background: rgba(255,255,255,0.1); width: 220px; height: 220px; border-radius: 50%; box-shadow: 0 0 15px #06b6d4; display: flex; flex-direction: column; justify-content: center; align-items: center; }
  .circle-card h3 { margin: 0 0 10px; font-weight: 600; font-size: 20px; }
  canvas { max-width: 160px !important; max-height: 160px !important; }
  form { margin: 30px auto; max-width: 350px; display: flex; flex-direction: column; gap: 15px; }
  input[type=text], input[type=number] { padding: 10px; font-size: 16px; border-radius: 8px; border:none; }
  button.save-btn { background:#06b6d4; border:none; color:#fff; padding: 12px; border-radius: 10px; cursor:pointer; font-weight: 600; font-size: 16px; }
  button.save-btn:hover { background:#028ea3; }
</style>
</head>
<body>
<header>
  <h1>داشبورد پنل Lorna</h1>
  <form method="POST" action="/logout" style="margin:0;">
    <button type="submit" class="logout">خروج</button>
  </form>
</header>

<div class="container">
  <form id="configForm">
    <label>آدرس IP ایران:</label>
    <input type="text" id="iran_ip" name="iran_ip" value="{{ iran_ip }}" required pattern="^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\.|$)){4}$" title="IP معتبر وارد کنید" />
    <label>پورت ایران:</label>
    <input type="number" id="iran_port" name="iran_port" value="{{ iran_port }}" required min="1" max="65535" />
    <button type="submit" class="save-btn">ذخیره تنظیمات</button>
  </form>

  <div class="circle-container">
    <div class="circle-card">
      <h3>سرعت آپلود (MB/s)</h3>
      <canvas id="uploadChart"></canvas>
      <div id="uploadValue" style="font-size:24px; margin-top:10px;">0.00</div>
    </div>
    <div class="circle-card">
      <h3>سرعت دانلود (MB/s)</h3>
      <canvas id="downloadChart"></canvas>
      <div id="downloadValue" style="font-size:24px; margin-top:10px;">0.00</div>
    </div>
    <div class="circle-card">
      <h3>مصرف CPU (%)</h3>
      <canvas id="cpuChart"></canvas>
      <div id="cpuValue" style="font-size:24px; margin-top:10px;">0</div>
    </div>
    <div class="circle-card">
      <h3>کاربران متصل</h3>
      <canvas id="usersChart"></canvas>
      <div id="usersValue" style="font-size:24px; margin-top:10px;">0</div>
    </div>
  </div>
</div>

<script>
const uploadCtx = document.getElementById('uploadChart').getContext('2d');
const downloadCtx = document.getElementById('downloadChart').getContext('2d');
const cpuCtx = document.getElementById('cpuChart').getContext('2d');
const usersCtx = document.getElementById('usersChart').getContext('2d');

function createCircleChart(ctx, color) {
  return new Chart(ctx, {
    type: 'doughnut',
    data: {
      labels: ['مقدار', 'خالی'],
      datasets: [{
        data: [0, 100],
        backgroundColor: [color, '#2a3a57'],
        borderWidth: 0
      }]
    },
    options: {
      cutout: '80%',
      responsive: true,
      plugins: { legend: { display: false } },
      animation: { duration: 500 }
    }
  });
}

const uploadChart = createCircleChart(uploadCtx, '#06b6d4');
const downloadChart = createCircleChart(downloadCtx, '#0abf5b');
const cpuChart = createCircleChart(cpuCtx, '#e06b6b');
const usersChart = createCircleChart(usersCtx, '#f3c623');

function updateCharts(data) {
  function update(chart, value, max=100) {
    const capped = Math.min(value, max);
    chart.data.datasets[0].data = [capped, max - capped];
    chart.update();
  }
  update(uploadChart, data.upload_speed * 10, 100);
  update(downloadChart, data.download_speed * 10, 100);
  update(cpuChart, data.cpu_usage, 100);
  update(usersChart, data.users, 100);

  document.getElementById('uploadValue').innerText = data.upload_speed.toFixed(2);
  document.getElementById('downloadValue').innerText = data.download_speed.toFixed(2);
  document.getElementById('cpuValue').innerText = data.cpu_usage.toFixed(1);
  document.getElementById('usersValue').innerText = data.users;
}

async function fetchData() {
  try {
    const resp = await fetch('/api/stats');
    const data = await resp.json();
    updateCharts(data);
  } catch(e) {
    console.error(e);
  }
}

document.getElementById('configForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  const ip = document.getElementById('iran_ip').value;
  const port = parseInt(document.getElementById('iran_port').value);
  const resp = await fetch('/api/config', {
    method: 'POST',
    headers: {'Content-Type': 'application/json'},
    body: JSON.stringify({iran_ip: ip, iran_port: port})
  });
  if (resp.ok) alert('تنظیمات ذخیره شد');
  else alert('خطا در ذخیره تنظیمات');
});

setInterval(fetchData, 3000);
fetchData();
</script>
</body>
</html>
'''

@app.route('/')
def index():
    if not verify_license():
        return "لایسنس معتبر نیست."
    if 'logged_in' in session and session['logged_in']:
        return redirect('/dashboard')
    return main_page

@app.route('/login', methods=['POST'])
def login():
    username = request.form.get('username','')
    password = request.form.get('password','')
    if username == USERNAME and password == PASSWORD:
        session['logged_in'] = True
        return redirect('/dashboard')
    else:
        return login_error_page

@app.route('/logout', methods=['POST'])
def logout():
    session.pop('logged_in', None)
    return redirect('/')

@app.route('/dashboard')
def dashboard():
    if not session.get('logged_in'):
        return redirect('/')
    config.read(CONFIG_PATH)
    iran_ip = config.get('tunnel', 'iran_ip', fallback='185.79.160.0')
    iran_port = config.getint('tunnel', 'iran_port', fallback=1080)
    return render_template_string(dashboard_page, iran_ip=iran_ip, iran_port=iran_port)

@app.route('/api/config', methods=['POST'])
def api_config():
    if not session.get('logged_in'):
        return jsonify({'error': 'unauthorized'}), 401
    data = request.json
    ip = data.get('iran_ip','').strip()
    port = int(data.get('iran_port', 0))
    # اعتبارسنجی ساده IP
    import re
    if not re.match(r'^(\d{1,3}\.){3}\d{1,3}$', ip):
        return jsonify({'error': 'invalid ip'}), 400
    if port < 1 or port > 65535:
        return jsonify({'error': 'invalid port'}), 400
    config.read(CONFIG_PATH)
    config.set('tunnel', 'iran_ip', ip)
    config.set('tunnel', 'iran_port', str(port))
    save_config()
    global IRAN_IP, IRAN_PORT
    IRAN_IP = ip
    IRAN_PORT = port
    return jsonify({'status': 'ok'})

@app.route('/api/stats')
def api_stats():
    if not session.get('logged_in'):
        return jsonify({'error': 'unauthorized'}), 401
    up_speed, down_speed, total_sent, total_recv = update_tunnel_usage()
    cpu, ram = get_cpu_ram_usage()
    users = get_xray_connected_users()
    return jsonify({
        'upload_speed': up_speed,
        'download_speed': down_speed,
        'total_upload_bytes': total_sent,
        'total_download_bytes': total_recv,
        'cpu_usage': cpu,
        'ram_usage': ram,
        'users': users
    })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=APP_PORT)
EOF

echo "[*] نصب کامل شد."
echo "برای اجرای پنل دستور زیر را بزنید:"
echo "source $VENV_DIR/bin/activate && python $APP_DIR/app.py"
