#!/bin/bash
set -e

# Lorna Monitoring Panel Installation Script
echo "=== نصب پنل مانیتورینگ لورنا (Ubuntu 22.04+) ==="
echo "1) نصب و راه‌اندازی پنل"
echo "2) حذف پنل"
read -p "انتخاب (1 یا 2): " CHOICE

# Configuration variables
APP_DIR="/opt/network_monitor"
VENV_DIR="$APP_DIR/venv"
APP_PORT=5000
LICENSE_FILE="$APP_DIR/license.key"
LICENSE_VALUE="lorna"
SERVICE_NAME="lorna-monitor"
SYSTEMD_FILE="/etc/systemd/system/$SERVICE_NAME.service"
GUNICORN_WORKERS=3
XRAY_PORT=""
LOG_DIR="/var/log/lorna"
DEFAULT_USERNAME="admin"
DEFAULT_PASSWORD="admin123"

# Function to generate a secure random string
generate_secret_key() {
    openssl rand -hex 16
}

# Function to check if a port is in use
check_port() {
    local port=$1
    if ss -tuln | grep -q ":$port "; then
        return 1
    fi
    return 0
}

# Function to prompt for a free port
prompt_for_port() {
    while true; do
        read -p "لطفاً پورت مورد نظر برای پنل را وارد کنید (پیش‌فرض: $APP_PORT): " input_port
        APP_PORT=${input_port:-$APP_PORT}
        if [[ ! $APP_PORT =~ ^[0-9]+$ ]] || [ $APP_PORT -lt 1024 ] || [ $APP_PORT -gt 65535 ]; then
            echo "پورت نامعتبر است. باید بین 1024 و 65535 باشد."
            continue
        fi
        if check_port $APP_PORT; then
            echo "پورت $APP_PORT آزاد است."
            break
        else
            echo "پورت $APP_PORT در حال استفاده است. لطفاً پورت دیگری انتخاب کنید."
        fi
    done
}

# Function to prompt for Xray port
prompt_for_xray_port() {
    while true; do
        read -p "لطفاً پورت سرویس Xray را وارد کنید (برای رد شدن خالی بگذارید): " XRAY_PORT
        if [ -z "$XRAY_PORT" ]; then
            echo "مانیتورینگ Xray غیرفعال شد."
            break
        fi
        if [[ ! $XRAY_PORT =~ ^[0-9]+$ ]] || [ $XRAY_PORT -lt 1 ] || [ $XRAY_PORT -gt 65535 ]; then
            echo "پورت نامعتبر است. باید بین 1 و 65535 باشد."
            continue
        fi
        if check_port $XRAY_PORT; then
            echo "هشدار: هیچ سرویسی روی پورت $XRAY_PORT یافت نشد. لطفاً بررسی کنید."
            read -p "آیا می‌خواهید ادامه دهید؟ (y/n): " confirm
            if [ "$confirm" != "y" ]; then
                continue
            fi
        fi
        break
    done
}

if [ "$CHOICE" == "1" ]; then
    echo "[*] بررسی پیش‌نیازها..."
    if ! command -v python3 >/dev/null 2>&1; then
        echo "خطا: python3 یافت نشد. لطفاً مطمئن شوید که روی سیستم نصب است."
        exit 1
    fi
    if ! command -v ss >/dev/null 2>&1; then
        echo "[*] نصب net-tools برای مانیتورینگ پورت..."
        apt update
        apt install -y net-tools
    fi

    echo "[*] دریافت پورت پنل..."
    prompt_for_port

    echo "[*] دریافت پورت Xray (اختیاری)..."
    prompt_for_xray_port

    echo "[*] نصب بسته‌های سیستمی..."
    apt update
    apt install -y python3 python3-venv python3-pip curl gunicorn

    echo "[*] ایجاد پوشه برنامه و لاگ..."
    mkdir -p "$APP_DIR" "$LOG_DIR"
    chown -R "$(whoami)": "$(whoami)" "$LOG_DIR"
    chmod 750 "$LOG_DIR"

    echo "[*] ایجاد فایل لایسنس..."
    echo "$LICENSE_VALUE" > "$LICENSE_FILE"
    chmod 600 "$LICENSE_FILE"

    echo "[*] ساخت محیط مجازی پایتون..."
    python3 -m venv "$VENV_DIR"
    source "$VENV_DIR/bin/activate"

    echo "[*] نصب پکیج‌های پایتونی..."
    pip install --upgrade pip >/dev/null
    pip install flask==2.3.3 psutil==5.9.5 gunicorn==21.2.0 >/dev/null

    echo "[*] تولید کلید مخفی امن..."
    SECRET_KEY=$(generate_secret_key)

    echo "[*] ایجاد فایل برنامه Flask..."
    cat > "$APP_DIR/app.py" <<'PYEOF'
from flask import Flask, render_template_string, request, redirect, url_for, session, jsonify
import psutil
import os
import time
import threading
import subprocess
import logging
from logging.handlers import RotatingFileHandler

app = Flask(__name__)
app.secret_key = os.environ.get('FLASK_SECRET_KEY', 'SECRET_KEY_PLACEHOLDER')
USERNAME = os.environ.get('LORNA_USERNAME', 'admin')
PASSWORD = os.environ.get('LORNA_PASSWORD', 'admin123')
LICENSE_FILE = "/opt/network_monitor/license.key"
LOG_DIR = "/var/log/lorna"
XRAY_PORT = os.environ.get('XRAY_PORT', '')

# تنظیم لاگینگ
os.makedirs(LOG_DIR, exist_ok=True)
handler = RotatingFileHandler(f"{LOG_DIR}/lorna.log", maxBytes=10*1024*1024, backupCount=5)
handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
app.logger.addHandler(handler)
app.logger.setLevel(logging.INFO)

# متغیرهای برای محاسبه سرعت شبکه
prev_net = {'bytes_sent': None, 'bytes_recv': None, 'time': None}
net_lock = threading.Lock()

def verify_license(license_key):
    try:
        if os.path.exists(LICENSE_FILE):
            with open(LICENSE_FILE, 'r') as f:
                stored = f.read().strip()
            return license_key.strip() == stored
        return license_key.strip() == "lorna"
    except Exception as e:
        app.logger.error(f"License verification failed: {e}")
        return False

def get_network_speed_mbps():
    with net_lock:
        try:
            counters = psutil.net_io_counters()
            cur_sent = counters.bytes_sent
            cur_recv = counters.bytes_recv
            now = time.time()

            if prev_net['time'] is None:
                prev_net['bytes_sent'] = cur_sent
                prev_net['bytes_recv'] = cur_recv
                prev_net['time'] = now
                return 0.0, 0.0

            dt = now - prev_net['time']
            if dt <= 0:
                return 0.0, 0.0

            delta_sent = cur_sent - prev_net['bytes_sent']
            delta_recv = cur_recv - prev_net['bytes_recv']

            prev_net['bytes_sent'] = cur_sent
            prev_net['bytes_recv'] = cur_recv
            prev_net['time'] = now

            up_mbps = (delta_sent * 8) / (dt * 1_000_000)
            down_mbps = (delta_recv * 8) / (dt * 1_000_000)

            return round(up_mbps, 3), round(down_mbps, 3)
        except Exception as e:
            app.logger.error(f"Network speed calculation failed: {e}")
            return 0.0, 0.0

def get_xray_users():
    if not XRAY_PORT:
        return 0, "غیرفعال"
    try:
        # تعداد اتصالات روی پورت Xray با استفاده از ss
        result = subprocess.run(
            ['ss', '-tn', f'sport = :{XRAY_PORT}'],
            capture_output=True, text=True, check=True
        )
        connections = len([line for line in result.stdout.splitlines() if 'ESTAB' in line])
        return connections, "فعال"
    except Exception as e:
        app.logger.error(f"Xray monitoring failed: {e}")
        return 0, "خطا"

# صفحه ورود
login_page = '''
<!doctype html>
<html lang="fa" dir="rtl">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>لورنا — ورود</title>
<link href="https://fonts.googleapis.com/css2?family=Vazirmatn:wght@300;400;600;700&display=swap" rel="stylesheet">
<style>
:root{
  --bg: linear-gradient(135deg,#071026,#0b2b44);
  --card:#07162b;
  --text:#eaf6ff;
  --accent:#06b6d4;
}
*{box-sizing:border-box;font-family:'Vazirmatn',sans-serif}
body{margin:0;min-height:100vh;background:var(--bg);color:var(--text);display:flex;align-items:center;justify-content:center;padding:20px}
.container{width:100%;max-width:1100px;display:grid;grid-template-columns:1fr 420px;gap:28px}
.panel{background:rgba(255,255,255,0.03);padding:28px;border-radius:14px;backdrop-filter:blur(6px)}
.brand{display:flex;gap:12px;align-items:center}
.logo{width:72px;height:72px;border-radius:14px;background:linear-gradient(90deg,var(--accent),#7c3aed);display:flex;align-items:center;justify-content:center;font-weight:700;color:white;font-size:28px}
h1{margin:6px 0}
.features{margin-top:16px;line-height:1.8;color:rgba(234,246,255,0.85)}
.card{background:linear-gradient(180deg,rgba(255,255,255,0.02),rgba(255,255,255,0.01));padding:22px;border-radius:12px}
.field{margin-bottom:12px}
input[type=text],input[type=password]{width:100%;padding:10px;border-radius:8px;border:1px solid rgba(255,255,255,0.06);background:transparent;color:inherit}
button{width:100%;padding:12px;border-radius:10px;border:0;background:linear-gradient(90deg,var(--accent),#7c3aed);color:#051426;font-weight:700;cursor:pointer}
.small{font-size:13px;color:rgba(234,246,255,0.7);margin-top:10px;text-align:center}
.error{background:#ffefef;color:#8b0000;padding:8px;border-radius:8px;margin-bottom:10px}
@media (max-width:960px){.container{grid-template-columns:1fr;}}
</style>
</head>
<body>
<div class="container">
  <div class="panel">
    <div class="brand"><div class="logo">L</div><div><h1>لورنا — پنل مانیتورینگ</h1><div class="small">نظارت لحظه‌ای سیستم، شبکه و سرویس‌های تونل</div></div></div>
    <div class="features">
      <ul>
        <li>گراف‌های دایره‌ای برای CPU، RAM و کاربران Xray</li>
        <li>نمایش سرعت شبکه (آپلود/دانلود) بر حسب Mbps</li>
        <li>مانیتورینگ تعداد کاربران متصل به پورت Xray</li>
        <li>تم روشن / تیره / AMOLED</li>
        <li>لایسنس ساده: <strong>lorna</strong></li>
      </ul>
    </div>
  </div>
  <div class="card">
    <h3>ورود به پنل</h3>
    {% if error %}<div class="error">{{ error }}</div>{% endif %}
    <form method="POST">
      <div class="field"><input type="text" name="username" placeholder="نام کاربری" required></div>
      <div class="field"><input type="password" name="password" placeholder="رمز عبور" required></div>
      <div class="field"><input type="text" name="license" placeholder="کد لایسنس (lorna)" required></div>
      <button type="submit">ورود</button>
    </form>
    <div class="small">نام کاربری/رمز پیش‌فرض: <strong>{{ username }} / {{ password }}</strong></div>
  </div>
</div>
</body>
</html>
'''

# داشبورد
dashboard_page = '''
<!doctype html>
<html lang="fa" dir="rtl">
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>لورنا — داشبورد</title>
<link href="https://fonts.googleapis.com/css2?family=Vazirmatn:wght@300;400;600;700&display=swap" rel="stylesheet">
<style>
:root{
  --bg-color:#04102a;
  --card-bg: rgba(255,255,255,0.03);
  --text:#eaf6ff;
  --muted:rgba(234,246,255,0.7);
  --accent:#06b6d4;
}
body{margin:0;font-family:'Vazirmatn',sans-serif;background:linear-gradient(180deg,var(--bg-color),#071b3b);color:var(--text);min-height:100vh}
.header{display:flex;justify-content:space-between;align-items:center;padding:14px 22px;background:var(--card-bg);backdrop-filter:blur(6px)}
.brand{display:flex;align-items:center;gap:12px}
.brand .logo{width:44px;height:44px;border-radius:10px;background:linear-gradient(90deg,var(--accent),#7c3aed);display:flex;align-items:center;justify-content:center;font-weight:700}
.controls{display:flex;gap:10px;align-items:center}
.container{padding:20px;display:grid;grid-template-columns:1fr 360px;gap:18px}
.panel{background:var(--card-bg);padding:18px;border-radius:12px}
.gauges{display:flex;flex-wrap:wrap;gap:14px;justify-content:center}
.gauge-card{width:220px;text-align:center}
.small{color:var(--muted);font-size:13px}
.rightcol{display:flex;flex-direction:column;gap:14px}
.input-inline{display:flex;gap:8px;align-items:center}
.btn{padding:8px 12px;border-radius:8px;border:0;background:linear-gradient(90deg,var(--accent),#7c3aed);color:#041026;font-weight:700;cursor:pointer}
.footer{padding:14px;text-align:center;color:var(--muted)}
body.light{ --bg-color:#f7fafc; --card-bg: #ffffff; --text:#111827; --muted:rgba(17,24,39,0.6); --accent:#0ea5a4;}
body.amoled{ --bg-color:#000000; --card-bg: rgba(255,255,255,0.02); --text:#00ffcc; --muted:rgba(0,255,204,0.5); --accent:#00ffd1;}
@media (max-width:980px){ .container{grid-template-columns:1fr} .rightcol{order:2} }
</style>
</head>
<body>
<div class="header">
  <div class="brand"><div class="logo">L</div><div><strong>لورنا</strong><div class="small">پنل مانیتورینگ</div></div></div>
  <div class="controls">
    <div class="small">IP: <strong>{{ request.remote_addr }}</strong></div>
    <a href="{{ url_for('logout') }}" class="btn" style="text-decoration:none">خروج</a>
  </div>
</div>
<div class="container">
  <div class="panel">
    <h3>وضعیت سیستم</h3>
    {% if not license_ok %}
      <div style="padding:12px;border-radius:8px;background:rgba(255,0,0,0.05);margin-bottom:12px">
        <strong>لایسنس ثبت نشده یا نامعتبر است.</strong>
        <div class="small">برای نمایش گراف‌ها کد لایسنس را وارد کنید (lorna)</div>
        {% if error %}<div style="color:#ffb4b4;margin-top:8px">{{ error }}</div>{% endif %}
        <form method="POST" action="{{ url_for('set_license') }}" style="margin-top:8px;display:flex;gap:8px;align-items:center">
          <input name="license" placeholder="lorna" style="padding:8px;border-radius:8px;border:1px solid rgba(255,255,255,0.06)">
          <button class="btn" type="submit">ثبت لایسنس</button>
        </form>
      </div>
    {% else %}
      <div class="gauges">
        <div class="gauge-card panel">
          <div id="cpuChart"></div>
          <div class="small">CPU</div>
          <div id="cpuText" class="small" style="margin-top:6px">-- %</div>
        </div>
        <div class="gauge-card panel">
          <div id="ramChart"></div>
          <div class="small">RAM</div>
          <div id="ramText" class="small" style="margin-top:6px">-- %</div>
        </div>
        <div class="gauge-card panel">
          <div id="upChart"></div>
          <div class="small">آپلود (نسبت به لینک)</div>
          <div id="upText" class="small" style="margin-top:6px">-- Mbps</div>
        </div>
        <div class="gauge-card panel">
          <div id="downChart"></div>
          <div class="small">دانلود (نسبت به لینک)</div>
          <div id="downText" class="small" style="margin-top:6px">-- Mbps</div>
        </div>
        {% if xray_port %}
        <div class="gauge-card panel">
          <div id="xrayChart"></div>
          <div class="small">کاربران Xray (پورت {{ xray_port }})</div>
          <div id="xrayText" class="small" style="margin-top:6px">-- کاربر</div>
        </div>
        {% endif %}
      </div>
      <div style="margin-top:14px" class="small">
        نمودارها هر 2 ثانیه آپدیت می‌شوند. برای مقایسه آپلود/دانلود درصدی، پهنای باند لینک خود را (Mbps) وارد کنید.
      </div>
    {% endif %}
  </div>
  <div class="rightcol">
    <div class="panel">
      <h4>تنظیمات</h4>
      <div class="small">تم: <select id="themeSel" onchange="setTheme(this.value)"><option value="dark">تیره</option><option value="light">روشن</option><option value="amoled">AMOLED</option></select></div>
      <div style="height:10px"></div>
      <div class="small">حداکثر لینک (Mbps):</div>
      <div style="display:flex;gap:8px;margin-top:8px">
        <input id="linkMax" type="number" min="1" value="100" style="padding:8px;border-radius:8px;border:1px solid rgba(255,255,255,0.06);width:140px">
        <button class="btn" onclick="saveLinkMax()">ذخیره</button>
      </div>
      <div style="height:12px"></div>
      <div class="panel">
        <h4>دستورات</h4>
        <div class="small">برای اجرای دستی:</div>
        <pre style="background:transparent;color:var(--muted);padding:8px;border-radius:6px">systemctl start {{ service_name }}</pre>
        <div class="small">برای توقف:</div>
        <pre style="background:transparent;color:var(--muted);padding:8px;border-radius:6px">systemctl stop {{ service_name }}</pre>
      </div>
    </div>
    <div class="panel">
      <h4>اطلاعات</h4>
      <div class="small">وضعیت لایسنس: <strong>{{ 'معتبر' if license_ok else 'نامعتبر' }}</strong></div>
      <div style="height:8px"></div>
      <div class="small">نسخه: 1.1</div>
      {% if xray_port %}
      <div style="height:8px"></div>
      <div class="small">وضعیت Xray (پورت {{ xray_port }}): <strong>{{ xray_status }}</strong></div>
      {% endif %}
    </div>
  </div>
</div>
<div class="footer">© lorna panel</div>
<script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
<script>
function formatNum(v){
  if(v>=1000) return (v/1000).toFixed(2)+' G';
  if(v>=1) return v.toFixed(2);
  if(v>0.001) return (v*1000).toFixed(2)+' m';
  return v.toFixed(3);
}
function setTheme(t){
  if(t==='dark') document.body.className='';
  else if(t==='light') document.body.className='light';
  else if(t==='amoled') document.body.className='amoled';
  localStorage.setItem('lorna_theme', t);
  document.getElementById('themeSel').value = t;
}
function loadTheme(){
  const t = localStorage.getItem('lorna_theme') || 'dark';
  setTheme(t);
}
function saveLinkMax(){
  const v = parseFloat(document.getElementById('linkMax').value) || 100;
  localStorage.setItem('lorna_link_max', v);
  alert('ذخیره شد: ' + v + ' Mbps');
}
function getLinkMax(){
  return parseFloat(localStorage.getItem('lorna_link_max')) || parseFloat(document.getElementById('linkMax').value) || 100;
}
function createRadial(selector, label, unit){
  const options = {
    chart: { type: 'radialBar', height: 220 },
    series: [0],
    plotOptions: {
      radialBar: {
        startAngle: -135,
        endAngle: 135,
        hollow: { size: '60%' },
        track: { background: 'rgba(255,255,255,0.06)' },
        dataLabels: {
          name: { show: true, fontSize: '14px', offsetY: -6 },
          value: { show: true, fontSize: '20px', offsetY: 10, formatter: function(val){ return val + (unit||'') } }
        }
      }
    },
    labels: [label],
    stroke: { lineCap: 'round' }
  };
  const chart = new ApexCharts(document.querySelector(selector), options);
  chart.render();
  return chart;
}
let cpuChart, ramChart, upChart, downChart, xrayChart;
function initCharts(){
  cpuChart = createRadial('#cpuChart', 'CPU', '%');
  ramChart = createRadial('#ramChart', 'RAM', '%');
  upChart = createRadial('#upChart', 'آپلود', '%');
  downChart = createRadial('#downChart', 'دانلود', '%');
  {% if xray_port %}
  xrayChart = createRadial('#xrayChart', 'کاربران Xray', '');
  {% endif %}
}
async function fetchAndUpdate(){
  try{
    const res = await fetch('/get_system_data');
    const d = await res.json();
    const cpu = Math.round(d.cpu*10)/10;
    const ram = Math.round(d.ram*10)/10;
    const up_mbps = d.net.upload_mbps || 0;
    const down_mbps = d.net.download_mbps || 0;
    const linkMax = getLinkMax() || 100;
    const up_pct = Math.min(100, Math.round((up_mbps / linkMax) * 1000)/10);
    const down_pct = Math.min(100, Math.round((down_mbps / linkMax) * 1000)/10);
    const xray_users = d.xray.users || 0;

    if(cpuChart) cpuChart.updateSeries([cpu]);
    if(ramChart) ramChart.updateSeries([ram]);
    if(upChart) upChart.updateSeries([up_pct]);
    if(downChart) downChart.updateSeries([down_pct]);
    {% if xray_port %}
    if(xrayChart) xrayChart.updateSeries([Math.min(100, xray_users)]);
    {% endif %}

    document.getElementById('cpuText').innerText = cpu + ' %';
    document.getElementById('ramText').innerText = ram + ' %';
    document.getElementById('upText').innerText = (up_mbps).toFixed(3) + ' Mbps (' + up_pct + '%)';
    document.getElementById('downText').innerText = (down_mbps).toFixed(3) + ' Mbps (' + down_pct + '%)';
    {% if xray_port %}
    document.getElementById('xrayText').innerText = xray_users + ' کاربر';
    {% endif %}
  }catch(e){
    console.warn('fetch error', e);
  }
}
window.addEventListener('load', ()=>{
  loadTheme();
  document.getElementById('linkMax').value = localStorage.getItem('lorna_link_max') || 100;
  initCharts();
  if({{ 'true' if license_ok else 'false' }}){
    fetchAndUpdate();
    setInterval(fetchAndUpdate, 2000);
  }
});
</script>
</body>
</html>
'''

@app.route('/', methods=['GET', 'POST'])
def login():
    if 'logged_in' in session:
        return redirect(url_for('dashboard'))
    error = None
    if request.method == 'POST':
        username = request.form.get('username','').strip()
        password = request.form.get('password','').strip()
        license_key = request.form.get('license','').strip()
        if username == USERNAME and password == PASSWORD:
            session['logged_in'] = True
            session['license_ok'] = verify_license(license_key)
            app.logger.info(f"Login attempt: username={username}, success=True")
            return redirect(url_for('dashboard'))
        else:
            error = 'نام کاربری یا رمز عبور اشتباه است'
            app.logger.warning(f"Login attempt: username={username}, success=False")
    return render_template_string(login_page, error=error, username=USERNAME, password=PASSWORD)

@app.route('/dashboard', methods=['GET'])
def dashboard():
    if 'logged_in' not in session:
        app.logger.warning("Unauthorized dashboard access attempt")
        return redirect(url_for('login'))
    cpu_percent = psutil.cpu_percent(interval=0.1)
    ram_percent = psutil.virtual_memory().percent
    up_mbps, down_mbps = get_network_speed_mbps()
    xray_users, xray_status = get_xray_users()
    return render_template_string(
        dashboard_page,
        cpu=cpu_percent,
        ram=ram_percent,
        net={'upload_mbps': up_mbps, 'download_mbps': down_mbps},
        license_ok=session.get('license_ok', False),
        error=None,
        request=request,
        service_name='lorna-monitor',
        xray_port=XRAY_PORT,
        xray_status=xray_status
    )

@app.route('/set_license', methods=['POST'])
def set_license():
    if 'logged_in' not in session:
        app.logger.warning("Unauthorized license set attempt")
        return redirect(url_for('login'))
    license_key = request.form.get('license','').strip()
    if verify_license(license_key):
        session['license_ok'] = True
        app.logger.info("License set successfully")
        return redirect(url_for('dashboard'))
    else:
        app.logger.warning("Invalid license key provided")
        return render_template_string(
            dashboard_page,
            cpu=psutil.cpu_percent(interval=0.1),
            ram=psutil.virtual_memory().percent,
            net={'upload_mbps': 0, 'download_mbps': 0},
            license_ok=False,
            error="کد لایسنس نامعتبر است",
            request=request,
            service_name='lorna-monitor',
            xray_port=XRAY_PORT,
            xray_status=get_xray_users()[1]
        )

@app.route('/get_system_data')
def get_system_data():
    if 'logged_in' not in session:
        app.logger.warning("Unauthorized system data access attempt")
        return jsonify({'error': 'Unauthorized'}), 401
    try:
        cpu = psutil.cpu_percent(interval=0.1)
        ram = psutil.virtual_memory().percent
        up, down = get_network_speed_mbps()
        xray_users, _ = get_xray_users()
        return jsonify({
            'cpu': cpu,
            'ram': ram,
            'net': {'upload_mbps': up, 'download_mbps': down},
            'xray': {'users': xray_users}
        })
    except Exception as e:
        app.logger.error(f"System data fetch failed: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/logout')
def logout():
    app.logger.info("User logged out")
    session.clear()
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.logger.warning("Running in debug mode. Use gunicorn for production.")
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
PYEOF

    # جایگزینی کلید مخفی در فایل
    sed -i "s/SECRET_KEY_PLACEHOLDER/$SECRET_KEY/" "$APP_DIR/app.py"

    echo "[*] تنظیم سرویس systemd..."
    cat > "$SYSTEMD_FILE" <<EOF
[Unit]
Description=Lorna Monitoring Panel
After=network.target

[Service]
User=$(whoami)
WorkingDirectory=$APP_DIR
Environment="FLASK_SECRET_KEY=$SECRET_KEY"
Environment="LORNA_USERNAME=$DEFAULT_USERNAME"
Environment="LORNA_PASSWORD=$DEFAULT_PASSWORD"
Environment="XRAY_PORT=$XRAY_PORT"
Environment="PORT=$APP_PORT"
ExecStart=$VENV_DIR/bin/gunicorn --workers $GUNICORN_WORKERS --bind 0.0.0.0:$APP_PORT app:app
Restart=always
SyslogIdentifier=$SERVICE_NAME
StandardOutput=append:$LOG_DIR/lorna.log
StandardError=append:$LOG_DIR/lorna.log

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    systemctl enable "$SERVICE_NAME"
    systemctl start "$SERVICE_NAME"

    echo "[+] نصب کامل شد."
    echo "پنل در حال اجرا روی: http://<IP-Server>:$APP_PORT"
    echo "دستورات مدیریت سرویس:"
    echo "  شروع: systemctl start $SERVICE_NAME"
    echo "  توقف: systemctl stop $SERVICE_NAME"
    echo "  وضعیت: systemctl status $SERVICE_NAME"
    echo "لایسنس پیش‌فرض: $LICENSE_VALUE"
    echo "نام کاربری/رمز پیش‌فرض: $DEFAULT_USERNAME/$DEFAULT_PASSWORD"
    if [ -n "$XRAY_PORT" ]; then
        echo "مانیتورینگ Xray روی پورت: $XRAY_PORT"
    fi
    echo "لاگ‌ها در: $LOG_DIR/lorna.log"

elif [ "$CHOICE" == "2" ]; then
    echo "[*] حذف پنل..."
    systemctl stop "$SERVICE_NAME" || true
    systemctl disable "$SERVICE_NAME" || true
    rm -f "$SYSTEMD_FILE"
    systemctl daemon-reload
    pkill -f "gunicorn.*app:app" || true
    rm -rf "$APP_DIR" "$LOG_DIR"
    echo "[+] حذف انجام شد."
else
    echo "گزینه نامعتبر."
    exit 1
fi
