#!/bin/bash
set -e

echo "=== نصب پنل مانیتورینگ لورنا (Ubuntu 22.04+) ==="
echo "1) نصب و راه‌اندازی پنل"
echo "2) حذف پنل"
read -p "انتخاب (1 یا 2): " CHOICE

APP_DIR="/opt/network_monitor"
VENV_DIR="$APP_DIR/venv"
APP_PORT=5000
LICENSE_FILE="$APP_DIR/license.key"
LICENSE_VALUE="lorna"

if [ "$CHOICE" == "1" ]; then
    echo "[*] نصب بسته‌های سیستمی..."
    apt update || true
    apt install -y python3 python3-venv python3-pip curl

    echo "[*] ایجاد پوشه برنامه..."
    mkdir -p "$APP_DIR"
    echo "$LICENSE_VALUE" > "$LICENSE_FILE"
    chmod 600 "$LICENSE_FILE"

    echo "[*] ساخت محیط مجازی پایتون..."
    python3 -m venv "$VENV_DIR"
    source "$VENV_DIR/bin/activate"

    echo "[*] نصب پکیج‌های پایتونی..."
    pip install --upgrade pip
    pip install flask psutil

    echo "[*] ایجاد فایل برنامه Flask..."
    cat > "$APP_DIR/app.py" <<'PYEOF'
from flask import Flask, render_template_string, request, redirect, url_for, session, jsonify
import psutil, os, time, threading

app = Flask(__name__)
app.secret_key = os.environ.get("LORNA_SECRET", "change_this_to_random_secret")

USERNAME = "admin"
PASSWORD = "admin123"
LICENSE_FILE = "/opt/network_monitor/license.key"

prev_net = {'bytes_sent': None, 'bytes_recv': None, 'time': None}
net_lock = threading.Lock()

def verify_license(license_key):
    try:
        if os.path.exists(LICENSE_FILE):
            with open(LICENSE_FILE, 'r') as f:
                stored = f.read().strip()
            return license_key.strip() == stored
        return license_key.strip() == "lorna"
    except Exception:
        return False

def get_network_speed_mbps():
    with net_lock:
        counters = psutil.net_io_counters()
        cur_sent = counters.bytes_sent
        cur_recv = counters.bytes_recv
        now = time.time()

        if prev_net['time'] is None:
            prev_net['bytes_sent'] = cur_sent
            prev_net['bytes_recv'] = cur_recv
            prev_net['time'] = now
            return 0.0, 0.0

        dt = now - prev_net['time']
        if dt <= 0:
            return 0.0, 0.0

        delta_sent = cur_sent - prev_net['bytes_sent']
        delta_recv = cur_recv - prev_net['bytes_recv']

        prev_net['bytes_sent'] = cur_sent
        prev_net['bytes_recv'] = cur_recv
        prev_net['time'] = now

        up_mbps = (delta_sent * 8) / (dt * 1_000_000)
        down_mbps = (delta_recv * 8) / (dt * 1_000_000)

        return round(up_mbps, 3), round(down_mbps, 3)

login_page = """<!DOCTYPE html><html lang="fa"><head><meta charset="UTF-8"><title>ورود</title></head><body>
<h2>ورود به پنل</h2>
{% if error %}<p style="color:red">{{ error }}</p>{% endif %}
<form method="POST">
    <input name="username" placeholder="نام کاربری"><br>
    <input type="password" name="password" placeholder="رمز عبور"><br>
    <input name="license" placeholder="کد لایسنس"><br>
    <button>ورود</button>
</form>
</body></html>"""

dashboard_page = """<!DOCTYPE html><html lang="fa"><head><meta charset="UTF-8"><title>مانیتورینگ</title>
<script>
async function refreshData(){
    let res = await fetch('/get_system_data');
    let data = await res.json();
    document.getElementById('cpu').innerText = data.cpu + " %";
    document.getElementById('ram').innerText = data.ram + " %";
    document.getElementById('up').innerText = data.net.upload_mbps + " Mbps";
    document.getElementById('down').innerText = data.net.download_mbps + " Mbps";
}
setInterval(refreshData, 2000);
</script>
</head><body onload="refreshData()">
<h2>مانیتورینگ سیستم</h2>
<p>CPU: <span id="cpu">{{ cpu }}</span></p>
<p>RAM: <span id="ram">{{ ram }}</span></p>
<p>آپلود: <span id="up">{{ net.upload_mbps }}</span></p>
<p>دانلود: <span id="down">{{ net.download_mbps }}</span></p>
<a href="/logout">خروج</a>
</body></html>"""

@app.route('/', methods=['GET', 'POST'])
def login():
    if 'logged_in' in session:
        return redirect(url_for('dashboard'))
    error = None
    if request.method == 'POST':
        u = request.form.get('username','')
        p = request.form.get('password','')
        lic = request.form.get('license','')
        if u == USERNAME and p == PASSWORD:
            session['logged_in'] = True
            session['license_ok'] = verify_license(lic)
            return redirect(url_for('dashboard'))
        else:
            error = "نام کاربری یا رمز عبور اشتباه است"
    return render_template_string(login_page, error=error)

@app.route('/dashboard')
def dashboard():
    if 'logged_in' not in session:
        return redirect(url_for('login'))
    cpu = psutil.cpu_percent(interval=0.1)
    ram = psutil.virtual_memory().percent
    up, down = get_network_speed_mbps()
    return render_template_string(dashboard_page, cpu=cpu, ram=ram, net={'upload_mbps': up, 'download_mbps': down})

@app.route('/get_system_data')
def get_data():
    cpu = psutil.cpu_percent(interval=0.1)
    ram = psutil.virtual_memory().percent
    up, down = get_network_speed_mbps()
    return jsonify({'cpu': cpu, 'ram': ram, 'net': {'upload_mbps': up, 'download_mbps': down}})

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
PYEOF

    echo "[*] ایجاد سرویس systemd..."
    cat > /etc/systemd/system/lorna.service <<EOF
[Unit]
Description=Lorna Monitoring Panel
After=network.target

[Service]
User=root
WorkingDirectory=$APP_DIR
ExecStart=$VENV_DIR/bin/python $APP_DIR/app.py
Restart=always

[Install]
WantedBy=multi-user.target
EOF

    systemctl daemon-reload
    systemctl enable --now lorna.service

    echo "✅ نصب کامل شد."
    echo "آدرس دسترسی: http://<IP-Server>:$APP_PORT"
    echo "یوزر: admin | پسورد: admin123 | لایسنس: $LICENSE_VALUE"

elif [ "$CHOICE" == "2" ]; then
    echo "[*] حذف پنل..."
    systemctl stop lorna.service || true
    systemctl disable lorna.service || true
    rm -f /etc/systemd/system/lorna.service
    rm -rf "$APP_DIR"
    systemctl daemon-reload
    echo "✅ حذف انجام شد."
else
    echo "گزینه نامعتبر."
fi
