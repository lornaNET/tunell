#!/bin/bash
set -e

APP_DIR="/opt/network_monitor"
VENV_DIR="$APP_DIR/venv"
APP_PORT=5000
LICENSE_FILE="$APP_DIR/license.key"
LICENSE_VALUE="lorna"

function print_menu() {
  clear
  echo "=============================="
  echo " پنل مانیتورینگ لورنا - نصب "
  echo "=============================="
  echo "1) نصب پنل"
  echo "2) حذف پنل"
  echo "3) خروج"
  echo "=============================="
  echo -n "انتخاب خود را وارد کنید: "
}

function install_panel() {
  echo "[*] آپدیت مخازن و نصب پیش‌نیازها..."
  apt update
  apt install -y python3 python3-venv python3-pip curl

  echo "[*] ایجاد دایرکتوری برنامه..."
  mkdir -p "$APP_DIR"
  echo "$LICENSE_VALUE" > "$LICENSE_FILE"
  chmod 600 "$LICENSE_FILE"

  echo "[*] ساخت محیط مجازی پایتون..."
  python3 -m venv "$VENV_DIR"
  source "$VENV_DIR/bin/activate"

  echo "[*] نصب پکیج‌های موردنیاز..."
  pip install --upgrade pip >/dev/null
  pip install flask psutil netifaces >/dev/null

  echo "[*] ایجاد فایل برنامه Flask..."
  cat > "$APP_DIR/app.py" <<'PYEOF'
from flask import Flask, render_template_string, request, redirect, url_for, session, jsonify
import psutil, os, time, threading, netifaces, socket

app = Flask(__name__)
app.secret_key = 'super_secret_key_lorna_change_me'

USERNAME = "admin"
PASSWORD = "admin123"
LICENSE_FILE = "/opt/network_monitor/license.key"

prev_net = {'bytes_sent': None, 'bytes_recv': None, 'time': None}
total_net = {'bytes_sent': 0, 'bytes_recv': 0}
net_lock = threading.Lock()

# برای تونل
tunnel_info = {'ip': None, 'port': None}
prev_tunnel = {'bytes_sent': None, 'bytes_recv': None, 'time': None}
total_tunnel = {'bytes_sent': 0, 'bytes_recv': 0}
tunnel_lock = threading.Lock()

def verify_license(license_key):
    try:
        if os.path.exists(LICENSE_FILE):
            with open(LICENSE_FILE, 'r') as f:
                stored = f.read().strip()
            return license_key.strip() == stored
        else:
            return license_key.strip() == "lorna"
    except Exception:
        return False

def update_network_usage():
    with net_lock:
        counters = psutil.net_io_counters()
        cur_sent = counters.bytes_sent
        cur_recv = counters.bytes_recv
        now = time.time()

        if prev_net['time'] is None:
            prev_net['bytes_sent'] = cur_sent
            prev_net['bytes_recv'] = cur_recv
            prev_net['time'] = now
            return 0.0, 0.0

        dt = now - prev_net['time']
        if dt <= 0:
            return 0.0, 0.0

        delta_sent = cur_sent - prev_net['bytes_sent']
        delta_recv = cur_recv - prev_net['bytes_recv']

        total_net['bytes_sent'] += max(delta_sent, 0)
        total_net['bytes_recv'] += max(delta_recv, 0)

        prev_net['bytes_sent'] = cur_sent
        prev_net['bytes_recv'] = cur_recv
        prev_net['time'] = now

        up_MBps = delta_sent / (1024*1024) / dt
        down_MBps = delta_recv / (1024*1024) / dt

        return round(up_MBps, 4), round(down_MBps, 4)

def update_tunnel_usage():
    # در اینجا ما سعی می‌کنیم ترافیک تونل رو با توجه به IP و پورت از net_connections محاسبه کنیم
    # متأسفانه psutil مستقیماً شمارش byte روی کانکشن خاص نداره
    # راه‌حل: فرض کنیم تونل روی یک اینترفیس مشخص هست یا با فیلتر روی اتصالات tcp روی ip:port خاص

    ip = tunnel_info.get('ip')
    port = tunnel_info.get('port')

    if not ip or not port:
        return 0.0, 0.0

    with tunnel_lock:
        # یک راه ساده: دنبال اینترفیس‌ای که IP تونل روی اون هست بگردیم
        # ولی چون ممکنه تونل TCP باشه، نمی‌تونیم مستقیم مصرفشو بدون ابزار تخصصی بخونیم
        # اینجا فقط از کانکشن های psutil.net_connections فیلتر می‌گیریم و جمع bytes انجام نمیدیم

        # به عنوان جایگزین، می‌تونیم مصرف شبکه کل رو جداگانه نگه داریم و تونل رو روی یک اینترفیس اختصاصی شبیه به tun0 فرض کنیم
        # ولی چون تونل شما روی IP و پورت خاصه، باید به شما بگیم روش دقیق نیاز به ابزار های sniffing یا iptables هست

        # برای مثال در این نسخه ساده ما مصرف کل شبکه رو در نظر می‌گیریم
        # ولی شما می‌تونید یک اینترفیس تونل مثل tun0 داشته باشید و مصرفش رو اینجا بگیرید:
        try:
            ifaces = psutil.net_if_stats()
            # فرض کنیم اینترفیس تونل تونل 'tun0' هست
            if 'tun0' in ifaces and ifaces['tun0'].isup:
                counters = psutil.net_io_counters(pernic=True).get('tun0')
                if counters:
                    now = time.time()
                    cur_sent = counters.bytes_sent
                    cur_recv = counters.bytes_recv
                    if prev_tunnel['time'] is None:
                        prev_tunnel['bytes_sent'] = cur_sent
                        prev_tunnel['bytes_recv'] = cur_recv
                        prev_tunnel['time'] = now
                        return 0.0, 0.0
                    dt = now - prev_tunnel['time']
                    if dt <= 0:
                        return 0.0, 0.0
                    delta_sent = cur_sent - prev_tunnel['bytes_sent']
                    delta_recv = cur_recv - prev_tunnel['bytes_recv']
                    total_tunnel['bytes_sent'] += max(delta_sent, 0)
                    total_tunnel['bytes_recv'] += max(delta_recv, 0)
                    prev_tunnel['bytes_sent'] = cur_sent
                    prev_tunnel['bytes_recv'] = cur_recv
                    prev_tunnel['time'] = now

                    up_MBps = delta_sent / (1024*1024) / dt
                    down_MBps = delta_recv / (1024*1024) / dt
                    return round(up_MBps, 4), round(down_MBps, 4)
        except Exception as e:
            return 0.0, 0.0

    return 0.0, 0.0

login_page = '''
<!doctype html>
<html lang="fa" dir="rtl">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>لورنا — ورود</title>
<style>
/* کدهای CSS مشابه کد قبلی ... */
body {
  font-family: Tahoma, sans-serif;
  background: linear-gradient(135deg,#071026,#0b2b44);
  color: #eaf6ff;
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
  margin: 0;
}
.container {
  background: rgba(255,255,255,0.05);
  padding: 24px 30px;
  border-radius: 16px;
  box-shadow: 0 0 12px rgba(0,0,0,0.7);
  max-width: 400px;
  width: 100%;
  text-align: center;
}
h1 {
  margin-bottom: 20px;
  font-weight: 600;
}
input[type=text], input[type=password] {
  width: 100%;
  padding: 10px 12px;
  margin: 10px 0 16px 0;
  border-radius: 8px;
  border: none;
  font-size: 16px;
}
button {
  width: 100%;
  padding: 12px 0;
  background: #06b6d4;
  border: none;
  border-radius: 10px;
  font-weight: 700;
  color: #051426;
  cursor: pointer;
  font-size: 18px;
}
.error {
  background: #ffefef;
  color: #8b0000;
  padding: 10px;
  border-radius: 8px;
  margin-bottom: 14px;
}
.small {
  margin-top: 12px;
  color: rgba(234,246,255,0.7);
  font-size: 14px;
}
</style>
</head>
<body>
<div class="container">
  <h1>ورود به پنل لورنا</h1>
  {% if error %}<div class="error">{{ error }}</div>{% endif %}
  <form method="POST">
    <input type="text" name="username" placeholder="نام کاربری" required />
    <input type="password" name="password" placeholder="رمز عبور" required />
    <input type="text" name="license" placeholder="کد لایسنس (lorna)" required />
    <button type="submit">ورود</button>
  </form>
  <div class="small">نام کاربری/رمز پیش‌فرض: <b>admin / admin123</b></div>
</div>
</body>
</html>
'''

dashboard_page = '''
<!doctype html>
<html lang="fa" dir="rtl">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>لورنا — داشبورد</title>
<style>
body {
  font-family: Tahoma, sans-serif;
  margin: 0;
  background: linear-gradient(180deg,#04102a,#071b3b);
  color: #eaf6ff;
  min-height: 100vh;
  direction: rtl;
}
header {
  background: rgba(255,255,255,0.05);
  backdrop-filter: blur(8px);
  padding: 14px 24px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}
h1 {
  margin: 0;
}
button {
  background: none;
  border: none;
  color: #06b6d4;
  font-weight: 600;
  cursor: pointer;
  font-size: 16px;
  border-radius: 8px;
  padding: 6px 14px;
  transition: background-color 0.3s ease;
}
button:hover {
  background: #06b6d4;
  color: #051426;
}
main {
  max-width: 1200px;
  margin: 22px auto;
  padding: 0 18px;
}
.cards {
  display: flex;
  gap: 18px;
  flex-wrap: wrap;
  justify-content: center;
}
.card {
  background: rgba(255,255,255,0.03);
  border-radius: 14px;
  padding: 18px 26px;
  width: 280px;
  box-sizing: border-box;
  text-align: center;
  box-shadow: 0 0 12px rgba(0,0,0,0.3);
}
h2 {
  margin: 10px 0 16px 0;
}
.value {
  font-size: 36px;
  font-weight: 700;
  margin-top: 6px;
  color: #7c3aed;
}
.label {
  margin-top: 8px;
  font-size: 14px;
  color: rgba(234,246,255,0.7);
}
.net-values {
  font-size: 20px;
  font-weight: 600;
  margin: 6px 0 0 0;
  color: #06b6d4;
}
#tunnelForm {
  margin: 24px auto;
  max-width: 400px;
  background: rgba(255,255,255,0.05);
  padding: 18px 24px;
  border-radius: 16px;
  box-shadow: 0 0 12px rgba(0,0,0,0.7);
  color: #eaf6ff;
}
#tunnelForm label {
  display: block;
  margin-bottom: 8px;
  font-weight: 700;
}
#tunnelForm input[type=text] {
  width: 100%;
  padding: 10px 12px;
  margin-bottom: 12px;
  border-radius: 8px;
  border: none;
  font-size: 16px;
}
#tunnelForm button {
  background: #7c3aed;
  border: none;
  border-radius: 10px;
  font-weight: 700;
  color: #fff;
  cursor: pointer;
  width: 100%;
  padding: 12px 0;
  font-size: 18px;
  transition: background-color 0.3s ease;
}
#tunnelForm button:hover {
  background: #5925a3;
}

.chart-container {
  max-width: 700px;
  margin: 36px auto;
}
</style>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
<header>
  <h1>پنل مانیتورینگ لورنا</h1>
  <form method="POST" action="/logout" style="margin:0;">
    <button type="submit">خروج</button>
  </form>
</header>
<main>
  <div class="cards">
    <div class="card">
      <h2>مصرف CPU</h2>
      <div class="value" id="cpuUsage">...</div>
      <div class="label">درصد استفاده</div>
    </div>
    <div class="card">
      <h2>مصرف RAM</h2>
      <div class="value" id="ramUsage">...</div>
      <div class="label">درصد استفاده</div>
    </div>
    <div class="card">
      <h2>مصرف شبکه کل</h2>
      <div class="value net-values" id="netUp">↑ ... MB/s</div>
      <div class="value net-values" id="netDown">↓ ... MB/s</div>
      <div class="label">آپلود / دانلود</div>
    </div>
  </div>

  <form id="tunnelForm" method="POST" action="/set_tunnel">
    <label for="ip">آدرس IP ایران تونل</label>
    <input type="text" id="ip" name="ip" placeholder="مثال: 5.123.45.67" required pattern="^(\d{1,3}\.){3}\d{1,3}$" />
    <label for="port">پورت تونل</label>
    <input type="text" id="port" name="port" placeholder="مثال: 12345" required pattern="^\d{1,5}$" />
    <button type="submit">تنظیم تونل</button>
  </form>

  <div class="chart-container">
    <canvas id="tunnelChart"></canvas>
  </div>

</main>

<script>
let tunnelUpData = [];
let tunnelDownData = [];
let labels = [];

const ctx = document.getElementById('tunnelChart').getContext('2d');
const tunnelChart = new Chart(ctx, {
  type: 'doughnut',
  data: {
    labels: ['آپلود (MB/s)', 'دانلود (MB/s)'],
    datasets: [{
      label: 'مصرف تونل',
      data: [0, 0],
      backgroundColor: ['#7c3aed', '#06b6d4'],
      hoverOffset: 10
    }]
  },
  options: {
    responsive: true,
    plugins: {
      legend: { position: 'bottom' }
    }
  }
});

async function fetchData(){
  try {
    const resp = await fetch('/api/usage');
    const data = await resp.json();
    document.getElementById('cpuUsage').innerText = data.cpu + ' %';
    document.getElementById('ramUsage').innerText = data.ram + ' %';
    document.getElementById('netUp').innerText = '↑ ' + data.net_up + ' MB/s';
    document.getElementById('netDown').innerText = '↓ ' + data.net_down + ' MB/s';

    tunnelChart.data.datasets[0].data = [data.tunnel_up, data.tunnel_down];
    tunnelChart.update();
  } catch(e){
    console.error('خطا در دریافت داده‌ها:', e);
  }
}

setInterval(fetchData, 2000);
fetchData();
</script>

</body>
</html>
'''

@app.route('/', methods=['GET', 'POST'])
def login():
    if 'logged_in' in session and session['logged_in']:
        return redirect(url_for('dashboard'))

    error = None
    if request.method == 'POST':
        username = request.form.get('username', '')
        password = request.form.get('password', '')
        license_key = request.form.get('license', '')
        if username == USERNAME and password == PASSWORD and verify_license(license_key):
            session['logged_in'] = True
            return redirect(url_for('dashboard'))
        else:
            error = "نام کاربری، رمز یا لایسنس اشتباه است."

    return render_template_string(login_page, error=error)

@app.route('/dashboard')
def dashboard():
    if 'logged_in' not in session or not session['logged_in']:
        return redirect(url_for('login'))
    return render_template_string(dashboard_page)

@app.route('/logout', methods=['POST'])
def logout():
    session.clear()
    return redirect(url_for('login'))

@app.route('/api/usage')
def api_usage():
    if 'logged_in' not in session or not session['logged_in']:
        return jsonify({"error": "Unauthorized"}), 401

    cpu = psutil.cpu_percent(interval=0.2)
    ram = psutil.virtual_memory().percent
    net_up, net_down = update_network_usage()
    tunnel_up, tunnel_down = update_tunnel_usage()
    return jsonify({
        "cpu": cpu,
        "ram": ram,
        "net_up": net_up,
        "net_down": net_down,
        "tunnel_up": tunnel_up,
        "tunnel_down": tunnel_down
    })

@app.route('/set_tunnel', methods=['POST'])
def set_tunnel():
    if 'logged_in' not in session or not session['logged_in']:
        return redirect(url_for('login'))

    ip = request.form.get('ip', '').strip()
    port = request.form.get('port', '').strip()
    # اعتبارسنجی ساده IP و پورت
    import re
    ip_pattern = r'^(\d{1,3}\.){3}\d{1,3}$'
    port_pattern = r'^\d{1,5}$'
    if not re.match(ip_pattern, ip):
        return "آدرس IP نامعتبر است.", 400
    if not re.match(port_pattern, port) or not (0 < int(port) <= 65535):
        return "پورت نامعتبر است.", 400

    tunnel_info['ip'] = ip
    tunnel_info['port'] = int(port)
    return redirect(url_for('dashboard'))

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=APP_PORT)
PYEOF

  echo "[*] ایجاد سرویس systemd..."
  cat > /etc/systemd/system/lorna_monitor.service <<EOF
[Unit]
Description=پنل مانیتورینگ لورنا
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=$APP_DIR
ExecStart=$VENV_DIR/bin/python3 $APP_DIR/app.py
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF

  echo "[*] فعالسازی سرویس..."
  systemctl daemon-reload
  systemctl enable --now lorna_monitor.service
  echo "[*] نصب پنل با موفقیت انجام شد."
  echo "پنل از طریق مرورگر به آدرس زیر در دسترس است:"
  echo "http://$(hostname -I | awk '{print $1}'):$APP_PORT"
  echo "نام کاربری/رمز پیش‌فرض: admin / admin123"
  echo "لایسنس: lorna"
}

function remove_panel() {
  systemctl stop lorna_monitor.service || true
  systemctl disable lorna_monitor.service || true
  rm -rf "$APP_DIR"
  rm -f /etc/systemd/system/lorna_monitor.service
  systemctl daemon-reload
  echo "پنل با موفقیت حذف شد."
}

while true; do
  print_menu
  read -r choice
  case $choice in
    1) install_panel ;;
    2) remove_panel ;;
    3) exit 0 ;;
    *) echo "گزینه نامعتبر است." ;;
  esac
  echo "ادامه با Enter..."
  read -r _
done
