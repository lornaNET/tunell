#!/bin/bash
set -e

APP_DIR="/opt/lorna"
VENV_DIR="$APP_DIR/venv"
CONFIG_FILE="$APP_DIR/config.ini"
LICENSE_FILE="$APP_DIR/license.key"

# رنگ‌ها برای پیام‌ها
RED='\033[0;31m'
GREEN='\033[0;32m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_header() {
  echo -e "${CYAN}==============================${NC}"
  echo -e "${CYAN}   نصب پنل مدیریت Lorna    ${NC}"
  echo -e "${CYAN}==============================${NC}"
}

print_footer() {
  echo -e "${CYAN}==============================${NC}"
  echo -e "${GREEN}نصب با موفقیت انجام شد!${NC}"
  echo -e "${CYAN}برای اجرای پنل دستور زیر را بزنید:${NC}"
  echo -e "source $VENV_DIR/bin/activate && python $APP_DIR/app.py"
  echo -e "${CYAN}==============================${NC}"
}

print_header

# دریافت ورودی کاربر
read -p "پورت پنل (پیش‌فرض 5000): " APP_PORT
APP_PORT=${APP_PORT:-5000}
if ! [[ "$APP_PORT" =~ ^[0-9]+$ ]] || [ "$APP_PORT" -lt 1 ] || [ "$APP_PORT" -gt 65535 ]; then
  echo -e "${RED}پورت نامعتبر است. پورت 5000 تنظیم می‌شود.${NC}"
  APP_PORT=5000
fi

read -p "نام کاربری پنل (پیش‌فرض admin): " USERNAME
USERNAME=${USERNAME:-admin}

read -p "رمز عبور پنل (پیش‌فرض admin123): " PASSWORD
PASSWORD=${PASSWORD:-admin123}

echo -e "${GREEN}در حال بروزرسانی بسته‌ها...${NC}"
apt update -y

echo -e "${GREEN}در حال نصب پیش‌نیازها...${NC}"
apt install -y python3 python3-venv python3-pip curl >/dev/null

mkdir -p "$APP_DIR"
chmod 700 "$APP_DIR"

echo "lorna" > "$LICENSE_FILE"
chmod 600 "$LICENSE_FILE"

echo -e "${GREEN}در حال ساخت محیط مجازی پایتون...${NC}"
python3 -m venv "$VENV_DIR"

echo -e "${GREEN}در حال نصب کتابخانه‌های پایتون...${NC}"
source "$VENV_DIR/bin/activate"
pip install --upgrade pip >/dev/null
pip install flask psutil netifaces configparser >/dev/null
deactivate

# ساخت فایل کانفیگ پیش‌فرض
cat > "$CONFIG_FILE" <<EOF
[panel]
port=$APP_PORT
username=$USERNAME
password=$PASSWORD

[tunnel]
iran_ip=185.79.160.0
iran_port=1080
EOF
chmod 600 "$CONFIG_FILE"

# نوشتن فایل اپلیکیشن Flask
cat > "$APP_DIR/app.py" <<'EOF'
import os
import threading
import time
import psutil
import subprocess
from flask import Flask, render_template_string, request, session, redirect, jsonify
import configparser
import re

app = Flask(__name__)
app.secret_key = os.urandom(24)

CONFIG_PATH = "/opt/lorna/config.ini"
LICENSE_FILE = "/opt/lorna/license.key"

config = configparser.ConfigParser()
config.read(CONFIG_PATH)

def verify_license():
    try:
        if os.path.exists(LICENSE_FILE):
            with open(LICENSE_FILE, 'r') as f:
                stored = f.read().strip()
            return stored == "lorna"
        else:
            return False
    except:
        return False

def load_config():
    global APP_PORT, USERNAME, PASSWORD, IRAN_IP, IRAN_PORT
    config.read(CONFIG_PATH)
    APP_PORT = int(config.get('panel', 'port', fallback='5000'))
    USERNAME = config.get('panel', 'username', fallback='admin')
    PASSWORD = config.get('panel', 'password', fallback='admin123')
    IRAN_IP = config.get('tunnel', 'iran_ip', fallback='185.79.160.0')
    IRAN_PORT = config.getint('tunnel', 'iran_port', fallback=1080)

load_config()

prev_tunnel = {'bytes_sent': None, 'bytes_recv': None, 'time': None}
total_tunnel = {'bytes_sent': 0, 'bytes_recv': 0}
tunnel_lock = threading.Lock()

def save_config():
    with open(CONFIG_PATH, 'w') as f:
        config.write(f)
    load_config()

def get_xray_connected_users():
    # شمارش کانکشن‌های tcp روی پورت IRAN_PORT با ss
    try:
        result = subprocess.run(['ss', '-tn', 'sport', f':{IRAN_PORT}'], capture_output=True, text=True)
        lines = result.stdout.strip().split('\n')
        count = max(0, len(lines) - 1)
        return count
    except Exception:
        return 0

def update_tunnel_usage():
    with tunnel_lock:
        try:
            ifaces = psutil.net_if_stats()
            if 'tun0' in ifaces and ifaces['tun0'].isup:
                counters = psutil.net_io_counters(pernic=True).get('tun0')
                if counters:
                    now = time.time()
                    cur_sent = counters.bytes_sent
                    cur_recv = counters.bytes_recv
                    if prev_tunnel['time'] is None:
                        prev_tunnel['bytes_sent'] = cur_sent
                        prev_tunnel['bytes_recv'] = cur_recv
                        prev_tunnel['time'] = now
                        return 0.0, 0.0, total_tunnel['bytes_sent'], total_tunnel['bytes_recv']
                    dt = now - prev_tunnel['time']
                    if dt <= 0:
                        return 0.0, 0.0, total_tunnel['bytes_sent'], total_tunnel['bytes_recv']
                    delta_sent = cur_sent - prev_tunnel['bytes_sent']
                    delta_recv = cur_recv - prev_tunnel['bytes_recv']
                    total_tunnel['bytes_sent'] += max(delta_sent, 0)
                    total_tunnel['bytes_recv'] += max(delta_recv, 0)
                    prev_tunnel['bytes_sent'] = cur_sent
                    prev_tunnel['bytes_recv'] = cur_recv
                    prev_tunnel['time'] = now

                    up_MBps = delta_sent / (1024*1024) / dt
                    down_MBps = delta_recv / (1024*1024) / dt
                    return round(up_MBps, 4), round(down_MBps, 4), total_tunnel['bytes_sent'], total_tunnel['bytes_recv']
        except Exception:
            return 0.0, 0.0, total_tunnel['bytes_sent'], total_tunnel['bytes_recv']
    return 0.0, 0.0, total_tunnel['bytes_sent'], total_tunnel['bytes_recv']

def get_cpu_ram_usage():
    cpu = psutil.cpu_percent(interval=0.5)
    ram = psutil.virtual_memory().percent
    return cpu, ram

main_page = '''
<!doctype html>
<html lang="fa" dir="rtl">
<head>
<meta charset="utf-8" />
<title>پنل مدیریت Lorna</title>
<style>
  body { font-family: Tahoma, sans-serif; background:#071b3b; color:#eaf6ff; text-align:center; padding:40px;}
  h1 { margin-bottom: 40px; }
  button { background:#06b6d4; border:none; padding:15px 30px; font-size:18px; margin:10px; color:#fff; border-radius:10px; cursor:pointer; transition:0.3s; }
  button:hover { background:#028ea3; }
  form { margin-top: 20px; }
  input { padding: 8px; font-size: 16px; border-radius: 8px; border:none; width: 200px; margin: 0 10px; }
</style>
</head>
<body>
  <h1>پنل مدیریت Lorna</h1>

  <div>
    <button onclick="window.location.href='/install'">نصب پنل</button>
    <button onclick="window.location.href='/remove'">حذف پنل</button>
    <button onclick="window.location.href='/change_pass'">تغییر پسورد</button>
    <button onclick="window.location.href='/change_port'">تغییر پورت</button>
  </div>

  <hr style="margin:40px 0; border-color:#06b6d4;" />

  <h2>ورود به داشبورد</h2>
  <form method="POST" action="/login">
    <input type="text" name="username" placeholder="نام کاربری" required autofocus />
    <input type="password" name="password" placeholder="رمز عبور" required />
    <button type="submit">ورود</button>
  </form>
</body>
</html>
'''

login_error_page = '''
<!doctype html>
<html lang="fa" dir="rtl">
<head>
<meta charset="utf-8" />
<title>خطا در ورود</title>
<style>body { font-family: Tahoma, sans-serif; background:#071b3b; color:#f66; text-align:center; padding:40px; }</style>
</head>
<body>
  <h1>نام کاربری یا رمز عبور اشتباه است</h1>
  <a href="/">بازگشت به صفحه اصلی</a>
</body>
</html>
'''

dashboard_page = '''
<!doctype html>
<html lang="fa" dir="rtl">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>داشبورد Lorna</title>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
  body { font-family: Tahoma, sans-serif; background: linear-gradient(180deg,#04102a,#071b3b); color: #eaf6ff; margin: 0; padding: 20px; direction: rtl; }
  header { display: flex; justify-content: space-between; align-items: center; background: rgba(255,255,255,0.05); padding: 15px 20px; border-radius: 12px; }
  h1 { margin: 0; }
  button.logout { background: #d4626a; border:none; color:#fff; padding: 8px 15px; border-radius: 8px; cursor:pointer; font-weight: 600; }
  .container { max-width: 1000px; margin: 20px auto; }
  .circle-container { display: flex; justify-content: space-around; flex-wrap: wrap; gap: 20px; margin-top: 40px; }
  .circle-card { background: rgba(255,255,255,0.1); width: 220px; height: 220px; border-radius: 50%; box-shadow: 0 0 15px #06b6d4; display: flex; flex-direction: column; justify-content: center; align-items: center; }
  .circle-card h3 { margin: 0 0 10px; font-weight: 600; font-size: 20px; }
  canvas { max-width: 160px !important; max-height: 160px !important; }
  form { margin: 30px auto; max-width: 350px; display: flex; flex-direction: column; gap: 15px; }
  input[type=text], input[type=number] { padding: 10px; font-size: 16px; border-radius: 8px; border:none; }
  button.save-btn { background:#06b6d4; border:none; color:#fff; padding: 12px; border-radius: 10px; cursor:pointer; font-weight: 600; font-size: 16px; }
  button.save-btn:hover { background:#028ea3; }
</style>
</head>
<body>
<header>
  <h1>داشبورد پنل Lorna</h1>
  <form method="POST" action="/logout" style="margin:0;">
    <button class="logout" type="submit">خروج</button>
  </form>
</header>
<div class="container">

  <div class="circle-container">
    <div class="circle-card">
      <h3>کاربران متصل</h3>
      <p id="connected_users" style="font-size: 3em; font-weight: 700;">0</p>
    </div>

    <div class="circle-card">
      <h3>میزان ارسال (MB/s)</h3>
      <canvas id="uploadChart"></canvas>
      <p id="upload_speed" style="font-weight: 600; font-size: 18px;">0.0000</p>
    </div>

    <div class="circle-card">
      <h3>میزان دریافت (MB/s)</h3>
      <canvas id="downloadChart"></canvas>
      <p id="download_speed" style="font-weight: 600; font-size: 18px;">0.0000</p>
    </div>

    <div class="circle-card">
      <h3>ترافیک کل (MB)</h3>
      <p id="total_traffic" style="font-size: 2em; font-weight: 700;">0</p>
    </div>

    <div class="circle-card">
      <h3>استفاده CPU (%)</h3>
      <canvas id="cpuChart"></canvas>
      <p id="cpu_usage" style="font-weight: 600; font-size: 18px;">0%</p>
    </div>

    <div class="circle-card">
      <h3>استفاده RAM (%)</h3>
      <canvas id="ramChart"></canvas>
      <p id="ram_usage" style="font-weight: 600; font-size: 18px;">0%</p>
    </div>
  </div>

</div>

<script>
let uploadChart, downloadChart, cpuChart, ramChart;
let uploadData = {labels: [], datasets: [{label: 'Upload MB/s', data: [], borderColor: '#06b6d4', fill: false, tension: 0.4}]};
let downloadData = {labels: [], datasets: [{label: 'Download MB/s', data: [], borderColor: '#06b6d4', fill: false, tension: 0.4}]};
let cpuData = {labels: [], datasets: [{label: 'CPU %', data: [], borderColor: '#06b6d4', fill: false, tension: 0.4}]};
let ramData = {labels: [], datasets: [{label: 'RAM %', data: [], borderColor: '#06b6d4', fill: false, tension: 0.4}]};

function createChart(ctx, data) {
  return new Chart(ctx, {
    type: 'line',
    data: data,
    options: {
      responsive: true,
      animation: false,
      scales: {
        x: { display: false },
        y: { beginAtZero: true }
      },
      plugins: { legend: { display: false } }
    }
  });
}

function updateCharts(up, down, cpu, ram) {
  let now = new Date().toLocaleTimeString();

  if (uploadData.labels.length > 20) {
    uploadData.labels.shift();
    uploadData.datasets[0].data.shift();
    downloadData.labels.shift();
    downloadData.datasets[0].data.shift();
    cpuData.labels.shift();
    cpuData.datasets[0].data.shift();
    ramData.labels.shift();
    ramData.datasets[0].data.shift();
  }

  uploadData.labels.push(now);
  uploadData.datasets[0].data.push(up);
  downloadData.labels.push(now);
  downloadData.datasets[0].data.push(down);
  cpuData.labels.push(now);
  cpuData.datasets[0].data.push(cpu);
  ramData.labels.push(now);
  ramData.datasets[0].data.push(ram);

  uploadChart.update();
  downloadChart.update();
  cpuChart.update();
  ramChart.update();

  document.getElementById('upload_speed').textContent = up.toFixed(4);
  document.getElementById('download_speed').textContent = down.toFixed(4);
  document.getElementById('cpu_usage').textContent = cpu.toFixed(1) + '%';
  document.getElementById('ram_usage').textContent = ram.toFixed(1) + '%';
}

function fetchStats() {
  fetch('/stats')
    .then(response => response.json())
    .then(data => {
      document.getElementById('connected_users').textContent = data.connected_users;
      document.getElementById('total_traffic').textContent = ((data.total_bytes_sent + data.total_bytes_recv)/(1024*1024)).toFixed(2);
      updateCharts(data.upload_MBps, data.download_MBps, data.cpu_percent, data.ram_percent);
    })
    .catch(console.error);
}

window.onload = function() {
  uploadChart = createChart(document.getElementById('uploadChart').getContext('2d'), uploadData);
  downloadChart = createChart(document.getElementById('downloadChart').getContext('2d'), downloadData);
  cpuChart = createChart(document.getElementById('cpuChart').getContext('2d'), cpuData);
  ramChart = createChart(document.getElementById('ramChart').getContext('2d'), ramData);

  fetchStats();
  setInterval(fetchStats, 2000);
}
</script>
</body>
</html>
'''

change_pass_page = '''
<!doctype html>
<html lang="fa" dir="rtl">
<head>
<meta charset="utf-8" />
<title>تغییر رمز عبور</title>
<style>
  body { font-family: Tahoma, sans-serif; background:#071b3b; color:#eaf6ff; text-align:center; padding:40px;}
  input { padding: 10px; font-size: 18px; margin: 10px auto; display: block; border-radius: 8px; border: none; width: 250px;}
  button { background:#06b6d4; border:none; padding:15px 30px; font-size:18px; margin:20px; color:#fff; border-radius:10px; cursor:pointer; }
  button:hover { background:#028ea3; }
</style>
</head>
<body>
  <h1>تغییر رمز عبور</h1>
  <form method="POST">
    <input type="password" name="new_password" placeholder="رمز عبور جدید" required />
    <button type="submit">ذخیره</button>
  </form>
  <a href="/dashboard">بازگشت به داشبورد</a>
</body>
</html>
'''

change_port_page = '''
<!doctype html>
<html lang="fa" dir="rtl">
<head>
<meta charset="utf-8" />
<title>تغییر پورت</title>
<style>
  body { font-family: Tahoma, sans-serif; background:#071b3b; color:#eaf6ff; text-align:center; padding:40px;}
  input { padding: 10px; font-size: 18px; margin: 10px auto; display: block; border-radius: 8px; border: none; width: 250px;}
  button { background:#06b6d4; border:none; padding:15px 30px; font-size:18px; margin:20px; color:#fff; border-radius:10px; cursor:pointer; }
  button:hover { background:#028ea3; }
</style>
</head>
<body>
  <h1>تغییر پورت پنل</h1>
  <form method="POST">
    <input type="number" name="new_port" placeholder="پورت جدید" min="1" max="65535" required />
    <button type="submit">ذخیره</button>
  </form>
  <a href="/dashboard">بازگشت به داشبورد</a>
</body>
</html>
'''

@app.route('/')
def index():
    if not verify_license():
        return "<h2 style='color:red;text-align:center;margin-top:50px;'>لایسنس معتبر نیست. لطفاً فایل license.key را بررسی کنید.</h2>"
    return main_page

@app.route('/login', methods=['POST'])
def login():
    if not verify_license():
        return "<h2 style='color:red;text-align:center;margin-top:50px;'>لایسنس معتبر نیست. ورود غیرمجاز است.</h2>"
    username = request.form.get('username')
    password = request.form.get('password')
    if username == USERNAME and password == PASSWORD:
        session['logged_in'] = True
        return redirect('/dashboard')
    else:
        return login_error_page, 401

@app.route('/dashboard')
def dashboard():
    if not session.get('logged_in'):
        return redirect('/')
    if not verify_license():
        return "<h2 style='color:red;text-align:center;margin-top:50px;'>لایسنس معتبر نیست. دسترسی غیرمجاز.</h2>"
    return dashboard_page

@app.route('/logout', methods=['POST'])
def logout():
    session.pop('logged_in', None)
    return redirect('/')

@app.route('/stats')
def stats():
    if not session.get('logged_in'):
        return jsonify({'error': 'Unauthorized'}), 401
    up, down, total_sent, total_recv = update_tunnel_usage()
    cpu, ram = get_cpu_ram_usage()
    connected_users = get_xray_connected_users()
    return jsonify({
        'upload_MBps': up,
        'download_MBps': down,
        'total_bytes_sent': total_sent,
        'total_bytes_recv': total_recv,
        'cpu_percent': cpu,
        'ram_percent': ram,
        'connected_users': connected_users
    })

@app.route('/change_pass', methods=['GET', 'POST'])
def change_pass():
    if not session.get('logged_in'):
        return redirect('/')
    if request.method == 'POST':
        new_pass = request.form.get('new_password')
        if new_pass and 3 <= len(new_pass) <= 64:
            config.set('panel', 'password', new_pass)
            save_config()
            return '<h2 style="text-align:center;color:green;margin-top:50px;">رمز عبور با موفقیت تغییر کرد.<br><a href="/dashboard">بازگشت به داشبورد</a></h2>'
        else:
            return '<h2 style="text-align:center;color:red;margin-top:50px;">رمز عبور نامعتبر است.<br><a href="/change_pass">بازگشت</a></h2>'
    return change_pass_page

@app.route('/change_port', methods=['GET', 'POST'])
def change_port():
    if not session.get('logged_in'):
        return redirect('/')
    if request.method == 'POST':
        try:
            new_port = int(request.form.get('new_port'))
            if 1 <= new_port <= 65535:
                config.set('panel', 'port', str(new_port))
                save_config()
                return f'<h2 style="text-align:center;color:green;margin-top:50px;">پورت پنل با موفقیت به {new_port} تغییر کرد.<br><a href="/dashboard">بازگشت به داشبورد</a></h2>'
            else:
                raise ValueError
        except Exception:
            return '<h2 style="text-align:center;color:red;margin-top:50px;">پورت نامعتبر است.<br><a href="/change_port">بازگشت</a></h2>'
    return change_port_page

@app.route('/install')
def install_panel():
    if not session.get('logged_in'):
        return redirect('/')
    # فقط به عنوان مثال پیام نصب (در عمل کد نصب یا اجرای اسکریپت نصب را اینجا اضافه کنید)
    return '<h2 style="text-align:center;color:green;margin-top:50px;">فرآیند نصب پنل آغاز شد.<br><a href="/dashboard">بازگشت به داشبورد</a></h2>'

@app.route('/remove')
def remove_panel():
    if not session.get('logged_in'):
        return redirect('/')
    # فقط پیام حذف (در عمل دستور حذف یا اسکریپت حذف را اینجا اضافه کنید)
    return '<h2 style="text-align:center;color:red;margin-top:50px;">پنل حذف شد.<br><a href="/">بازگشت به صفحه اصلی</a></h2>'

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=APP_PORT)
EOF

chmod +x "$APP_DIR/app.py"

print_footer
