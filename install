from flask import Flask, render_template_string, request, redirect, url_for, flash, jsonify, session
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
import psutil
import os

app = Flask(__name__)
app.config['SECRET_KEY'] = os.environ.get('SECRET_KEY') or 'your-secret-key'
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///database.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['ADMIN_USERNAME'] = 'admin'

db = SQLAlchemy(app)
login_manager = LoginManager(app)
login_manager.login_view = 'login'

# مدل کاربر
class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(150), unique=True)
    password_hash = db.Column(db.String(200))

    def set_password(self, password):
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

# ایجاد دیتابیس و کاربر اولیه قبل از اولین درخواست
@app.before_first_request
def create_user():
    db.create_all()
    if not User.query.filter_by(username=app.config['ADMIN_USERNAME']).first():
        admin = User(username=app.config['ADMIN_USERNAME'])
        admin.set_password('admin123')  # پسورد اولیه رو بعدا تغییر بده
        db.session.add(admin)
        db.session.commit()

def get_system_stats():
    cpu_percent = psutil.cpu_percent(interval=1)
    ram = psutil.virtual_memory()
    disk = psutil.disk_usage('/')
    net = psutil.net_io_counters()
    return {
        'cpu_percent': cpu_percent,
        'ram_total': ram.total,
        'ram_used': ram.used,
        'ram_percent': ram.percent,
        'disk_total': disk.total,
        'disk_used': disk.used,
        'disk_percent': disk.percent,
        'net_bytes_sent': net.bytes_sent,
        'net_bytes_recv': net.bytes_recv,
    }

# قالب‌ها به صورت رشته (برای یک فایل بودن)
login_html = '''
<!DOCTYPE html>
<html lang="fa" dir="rtl">
<head>
  <meta charset="UTF-8" />
  <title>ورود به پنل مانیتورینگ</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
</head>
<body class="bg-light d-flex justify-content-center align-items-center vh-100">
  <div class="card p-4 shadow" style="width: 350px;">
    <h3 class="mb-4 text-center">ورود</h3>
    {% with messages = get_flashed_messages(with_categories=true) %}
      {% if messages %}
        {% for category, msg in messages %}
          <div class="alert alert-{{category}}">{{msg}}</div>
        {% endfor %}
      {% endif %}
    {% endwith %}
    <form method="post">
      <div class="mb-3">
        <label for="username" class="form-label">نام کاربری</label>
        <input type="text" class="form-control" id="username" name="username" required autofocus />
      </div>
      <div class="mb-3">
        <label for="password" class="form-label">رمز عبور</label>
        <input type="password" class="form-control" id="password" name="password" required />
      </div>
      <button type="submit" class="btn btn-primary w-100">ورود</button>
    </form>
  </div>
</body>
</html>
'''

index_html = '''
<!DOCTYPE html>
<html lang="fa" dir="rtl">
<head>
  <meta charset="UTF-8" />
  <title>پنل مانیتورینگ سیستم</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
  <style>
    body {
      padding: 20px;
      background-color: #f8f9fa;
    }
    .stat-box {
      padding: 20px;
      background: white;
      border-radius: 8px;
      box-shadow: 0 0 10px rgb(0 0 0 / 0.1);
      margin-bottom: 20px;
    }
  </style>
</head>
<body>
  <nav class="navbar navbar-expand-lg navbar-light bg-white mb-4 shadow-sm">
    <div class="container-fluid">
      <a class="navbar-brand" href="#">پنل مانیتورینگ</a>
      <div class="d-flex align-items-center">
        <span class="me-3">سلام، {{ user.username }}</span>
        <a href="{{ url_for('logout') }}" class="btn btn-outline-danger btn-sm">خروج</a>
      </div>
    </div>
  </nav>
  
  <div class="container">
    <div class="row g-3">
      <div class="col-md-3 stat-box text-center">
        <h5>درصد استفاده CPU</h5>
        <h2>{{ stats.cpu_percent }}%</h2>
      </div>
      <div class="col-md-3 stat-box text-center">
        <h5>رم استفاده شده</h5>
        <h2>{{ (stats.ram_used / (1024**3))|round(2) }} GB</h2>
        <small>از {{ (stats.ram_total / (1024**3))|round(2) }} GB</small>
      </div>
      <div class="col-md-3 stat-box text-center">
        <h5>فضای دیسک استفاده شده</h5>
        <h2>{{ (stats.disk_used / (1024**3))|round(2) }} GB</h2>
        <small>از {{ (stats.disk_total / (1024**3))|round(2) }} GB</small>
      </div>
      <div class="col-md-3 stat-box text-center">
        <h5>ترافیک شبکه</h5>
        <h6>ارسال: {{ (stats.net_bytes_sent / (1024**2))|round(2) }} MB</h6>
        <h6>دریافت: {{ (stats.net_bytes_recv / (1024**2))|round(2) }} MB</h6>
      </div>
    </div>
  </div>
</body>
</html>
'''

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        user = User.query.filter_by(username=username).first()
        if user and user.check_password(password):
            login_user(user)
            return redirect(url_for('dashboard'))
        else:
            flash('نام کاربری یا رمز عبور اشتباه است.', 'danger')
    return render_template_string(login_html)

@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('خروج با موفقیت انجام شد.', 'success')
    return redirect(url_for('login'))

@app.route('/')
@login_required
def dashboard():
    stats = get_system_stats()
    return render_template_string(index_html, stats=stats, user=current_user)

@app.route('/api/stats')
@login_required
def api_stats():
    return jsonify(get_system_stats())

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
