#!/bin/bash
set -e

echo "=== نصب پنل مانیتورینگ لورنا (Ubuntu 22.04+) ==="
echo "1) نصب و راه‌اندازی پنل"
echo "2) حذف پنل"
read -p "انتخاب (1 یا 2): " CHOICE

APP_DIR="/opt/network_monitor"
VENV_DIR="$APP_DIR/venv"
APP_PORT=5000
LICENSE_FILE="$APP_DIR/license.key"
LICENSE_VALUE="lorna"

if [ "$CHOICE" == "1" ]; then
    echo "[*] نصب بسته‌های سیستمی..."
    apt update || true
    apt install -y python3 python3-venv python3-pip curl

    echo "[*] ایجاد پوشه برنامه..."
    mkdir -p "$APP_DIR"
    echo "$LICENSE_VALUE" > "$LICENSE_FILE"
    chmod 600 "$LICENSE_FILE"

    echo "[*] ساخت محیط مجازی پایتون..."
    python3 -m venv "$VENV_DIR"
    source "$VENV_DIR/bin/activate"

    echo "[*] نصب پکیج‌های پایتونی..."
    pip install --upgrade pip
    pip install flask psutil

    echo "[*] ایجاد فایل برنامه Flask..."
    cat > "$APP_DIR/app.py" <<'PYEOF'
from flask import Flask, render_template_string, request, redirect, url_for, session, jsonify
import psutil, os, time, threading

app = Flask(__name__)
app.secret_key = os.environ.get("LORNA_SECRET", "super_secret_key_lorna_change_me")

USERNAME = "admin"
PASSWORD = "admin123"
LICENSE_FILE = "/opt/network_monitor/license.key"

prev_net = {'bytes_sent': None, 'bytes_recv': None, 'time': None}
net_lock = threading.Lock()

def verify_license(license_key):
    try:
        if os.path.exists(LICENSE_FILE):
            with open(LICENSE_FILE, 'r') as f:
                stored = f.read().strip()
            return license_key.strip() == stored
        return license_key.strip() == "lorna"
    except Exception:
        return False

def get_network_speed_mbps():
    with net_lock:
        counters = psutil.net_io_counters()
        cur_sent = counters.bytes_sent
        cur_recv = counters.bytes_recv
        now = time.time()

        if prev_net['time'] is None:
            prev_net['bytes_sent'] = cur_sent
            prev_net['bytes_recv'] = cur_recv
            prev_net['time'] = now
            return 0.0, 0.0

        dt = now - prev_net['time']
        if dt <= 0:
            return 0.0, 0.0

        delta_sent = cur_sent - prev_net['bytes_sent']
        delta_recv = cur_recv - prev_net['bytes_recv']

        prev_net['bytes_sent'] = cur_sent
        prev_net['bytes_recv'] = cur_recv
        prev_net['time'] = now

        up_mbps = (delta_sent * 8) / (dt * 1_000_000)
        down_mbps = (delta_recv * 8) / (dt * 1_000_000)

        return round(up_mbps, 3), round(down_mbps, 3)

# ===== HTML Templates =====
login_page = r'''
<!DOCTYPE html>
<html lang="fa">
<head>
<meta charset="UTF-8">
<title>ورود به پنل لورنا</title>
<style>
body { font-family: Tahoma; background-color: #f0f0f0; text-align: center; }
.login-box { width: 300px; margin: auto; margin-top: 100px; padding: 20px; background: white; border-radius: 8px; box-shadow: 0px 0px 10px gray; }
input { width: 90%; padding: 10px; margin: 5px 0; border: 1px solid #ccc; border-radius: 4px; }
button { background-color: #28a745; color: white; padding: 10px; border: none; border-radius: 4px; cursor: pointer; }
button:hover { background-color: #218838; }
.error { color: red; }
</style>
</head>
<body>
<div class="login-box">
    <h2>ورود به پنل</h2>
    {% if error %}<p class="error">{{ error }}</p>{% endif %}
    <form method="POST">
        <input type="text" name="username" placeholder="نام کاربری"><br>
        <input type="password" name="password" placeholder="رمز عبور"><br>
        <input type="text" name="license" placeholder="کد لایسنس"><br>
        <button type="submit">ورود</button>
    </form>
</div>
</body>
</html>
'''

dashboard_page = r'''
<!DOCTYPE html>
<html lang="fa">
<head>
<meta charset="UTF-8">
<title>داشبورد مانیتورینگ</title>
<style>
body { font-family: Tahoma; background-color: #eef; }
.container { width: 600px; margin: auto; padding: 20px; }
.card { background: white; padding: 15px; margin: 10px 0; border-radius: 8px; box-shadow: 0px 0px 5px gray; }
h2 { text-align: center; }
.logout { text-align: center; margin-top: 10px; }
.error { color: red; text-align: center; }
</style>
<script>
async function refreshData(){
    let res = await fetch('/get_system_data');
    let data = await res.json();
    document.getElementById('cpu').innerText = data.cpu + " %";
    document.getElementById('ram').innerText = data.ram + " %";
    document.getElementById('upload').innerText = data.net.upload_mbps + " Mbps";
    document.getElementById('download').innerText = data.net.download_mbps + " Mbps";
}
setInterval(refreshData, 2000);
</script>
</head>
<body onload="refreshData()">
<div class="container">
    <h2>داشبورد مانیتورینگ</h2>
    {% if not license_ok %}
        <div class="card">
            <p class="error">لایسنس فعال نیست!</p>
            {% if error %}<p class="error">{{ error }}</p>{% endif %}
            <form method="POST" action="/set_license">
                <input type="text" name="license" placeholder="کد لایسنس">
                <button type="submit">ثبت</button>
            </form>
        </div>
    {% endif %}
    <div class="card">CPU: <span id="cpu">{{ cpu }}</span></div>
    <div class="card">RAM: <span id="ram">{{ ram }}</span></div>
    <div class="card">آپلود: <span id="upload">{{ net.upload_mbps }}</span></div>
    <div class="card">دانلود: <span id="download">{{ net.download_mbps }}</span></div>
    <div class="logout"><a href="/logout">خروج</a></div>
</div>
</body>
</html>
'''
# ==========================

@app.route('/', methods=['GET', 'POST'])
def login():
    if 'logged_in' in session:
        return redirect(url_for('dashboard'))
    error = None
    if request.method == 'POST':
        username = request.form.get('username','').strip()
        password = request.form.get('password','').strip()
        license_key = request.form.get('license','').strip()
        if username == USERNAME and password == PASSWORD:
            session['logged_in'] = True
            session['license_ok'] = verify_license(license_key)
            return redirect(url_for('dashboard'))
        error = 'نام کاربری یا رمز عبور اشتباه است'
    return render_template_string(login_page, error=error)

@app.route('/dashboard')
def dashboard():
    if 'logged_in' not in session:
        return redirect(url_for('login'))
    cpu_percent = psutil.cpu_percent(interval=0.1)
    ram_percent = psutil.virtual_memory().percent
    up_mbps, down_mbps = get_network_speed_mbps()
    return render_template_string(
        dashboard_page,
        cpu=cpu_percent,
        ram=ram_percent,
        net={'upload_mbps': up_mbps, 'download_mbps': down_mbps},
        license_ok=session.get('license_ok', False),
        error=None,
        request=request,
        venv=os.path.join(os.path.dirname(__file__), '..', 'venv'),
        app_path=os.path.dirname(__file__)
    )

@app.route('/set_license', methods=['POST'])
def set_license():
    if 'logged_in' not in session:
        return redirect(url_for('login'))
    license_key = request.form.get('license','').strip()
    if verify_license(license_key):
        session['license_ok'] = True
        return redirect(url_for('dashboard'))
    return render_template_string(
        dashboard_page,
        cpu=psutil.cpu_percent(interval=0.1),
        ram=psutil.virtual_memory().percent,
        net={'upload_mbps': 0, 'download_mbps': 0},
        license_ok=False,
        error="کد لایسنس نامعتبر است",
        request=request,
        venv=os.path.join(os.path.dirname(__file__), '..', 'venv'),
        app_path=os.path.dirname(__file__)
    )

@app.route('/get_system_data')
def get_system_data():
    cpu = psutil.cpu_percent(interval=0.1)
    ram = psutil.virtual_memory().percent
    up, down = get_network_speed_mbps()
    return jsonify({'cpu': cpu, 'ram': ram, 'net': {'upload_mbps': up, 'download_mbps': down}})

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login'))

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
PYEOF

    echo "[+] نصب کامل شد."
    echo "برای اجرای پنل:"
    echo "  source $VENV_DIR/bin/activate"
    echo "  python $APP_DIR/app.py"
    echo "سپس مرورگر: http://<IP-Server>:$APP_PORT"
    echo "یوزر: admin | پسورد: admin123 | لایسنس: $LICENSE_VALUE"

elif [ "$CHOICE" == "2" ]; then
    echo "[*] حذف پنل..."
    pkill -f "$APP_DIR/app.py" || true
    rm -rf "$APP_DIR"
    echo "[+] حذف انجام شد."
else
    echo "گزینه نامعتبر."
fi
