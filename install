#!/bin/bash
set -e
echo "=== نصب پنل مانیتورینگ لورنا (نسخه گرافیکی حرفه‌ای) ==="
echo "1) نصب و راه‌اندازی"
echo "2) حذف کامل"
read -p "انتخاب: " CHOICE

APP_DIR="/opt/lorna"
VENV_DIR="$APP_DIR/venv"
APP_PORT=5000
LICENSE_FILE="$APP_DIR/license.key"
LICENSE_VALUE="lorna"
SERVICE_NAME="lorna-monitor"
SYSTEMD_FILE="/etc/systemd/system/$SERVICE_NAME.service"
GUNICORN_WORKERS=3
XRAY_PORT=""
LOG_DIR="/var/log/lorna"
DEFAULT_USERNAME="admin"
DEFAULT_PASSWORD="admin123"

generate_secret_key(){ openssl rand -hex 16; }
check_port(){ ss -tuln | grep -q ":$1 " && return 1 || return 0; }
prompt_for_port(){ while true; do read -p "پورت پنل [${APP_PORT}]: " p; APP_PORT=${p:-$APP_PORT}; [[ ! $APP_PORT =~ ^[0-9]+$ ]] && echo "نامعتبر!" && continue; check_port $APP_PORT && break || echo "پورت مشغول است."; done; }
prompt_for_xray_port(){ while true; do read -p "پورت Xray (خالی=غیرفعال): " XRAY_PORT; [[ -z "$XRAY_PORT" ]] && break; [[ ! $XRAY_PORT =~ ^[0-9]+$ ]] && echo "نامعتبر!" && continue; break; done; }

if [ "$CHOICE" == "1" ]; then
  echo "[*] پاک‌سازی نسخه قبلی..."
  systemctl stop "$SERVICE_NAME" 2>/dev/null || true
  systemctl disable "$SERVICE_NAME" 2>/dev/null || true
  rm -f "$SYSTEMD_FILE"
  pkill -f "gunicorn.*app:app" 2>/dev/null || true
  rm -rf "$APP_DIR" "$LOG_DIR"
  systemctl daemon-reload

  echo "[*] بررسی پیش‌نیازها..."
  apt update && apt install -y python3 python3-venv python3-pip iproute2 gunicorn curl

  prompt_for_port
  prompt_for_xray_port

  echo "[*] ساخت دایرکتوری‌ها..."
  mkdir -p "$APP_DIR" "$LOG_DIR"
  echo "$LICENSE_VALUE" > "$LICENSE_FILE"
  chmod 600 "$LICENSE_FILE"

  echo "[*] ساخت محیط مجازی..."
  python3 -m venv "$VENV_DIR"
  source "$VENV_DIR/bin/activate"
  pip install --upgrade pip
  pip install flask==2.3.3 psutil==5.9.5 gunicorn==21.2.0

  SECRET_KEY=$(generate_secret_key)

cat > "$APP_DIR/app.py" <<'PYEOF'
from flask import Flask, render_template_string, request, redirect, url_for, session, jsonify
import psutil, os, time, threading, subprocess, logging
from logging.handlers import RotatingFileHandler

app = Flask(__name__)
app.secret_key = os.environ.get('FLASK_SECRET_KEY', 'key')

USERNAME = os.environ.get('LORNA_USERNAME', 'admin')
PASSWORD = os.environ.get('LORNA_PASSWORD', 'admin123')
LICENSE_FILE = "/opt/lorna/license.key"
LOG_DIR = "/var/log/lorna"
XRAY_PORT = os.environ.get('XRAY_PORT', '')

os.makedirs(LOG_DIR, exist_ok=True)
handler = RotatingFileHandler(f"{LOG_DIR}/lorna.log", maxBytes=10*1024*1024, backupCount=5)
handler.setFormatter(logging.Formatter('%(asctime)s - %(levelname)s - %(message)s'))
app.logger.addHandler(handler)
app.logger.setLevel(logging.INFO)

prev_net = {'bytes_sent': None, 'bytes_recv': None, 'time': None}
net_lock = threading.Lock()

def verify_license(k):
    return os.path.exists(LICENSE_FILE) and open(LICENSE_FILE).read().strip() == k.strip()

def net_speed():
    with net_lock:
        c = psutil.net_io_counters()
        now = time.time()
        if prev_net['time'] is None:
            prev_net.update({'bytes_sent': c.bytes_sent, 'bytes_recv': c.bytes_recv, 'time': now})
            return 0, 0
        dt = now - prev_net['time']
        ds = c.bytes_sent - prev_net['bytes_sent']
        dr = c.bytes_recv - prev_net['bytes_recv']
        prev_net.update({'bytes_sent': c.bytes_sent, 'bytes_recv': c.bytes_recv, 'time': now})
        return round((ds * 8) / (dt * 1e6), 2), round((dr * 8) / (dt * 1e6), 2)

def xray_users():
    if not XRAY_PORT:
        return 0, "غیرفعال"
    try:
        cmd = ['ss', '-tn', f'sport = :{XRAY_PORT}']
        res = subprocess.run(cmd, capture_output=True, text=True)
        cnt = len([l for l in res.stdout.splitlines() if f":{XRAY_PORT}" in l and 'ESTAB' in l])
        return cnt, "فعال"
    except:
        return 0, "خطا"

login_tpl = """
<!doctype html>
<html lang="fa" dir="rtl">
<head>
<meta charset="utf-8">
<title>ورود به لورنا</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.rtl.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" rel="stylesheet">
<style>
body {
  background: linear-gradient(135deg, #0f172a, #1e293b);
  color: white;
}
.login-container {
  max-width: 400px;
  margin: 10% auto;
  padding: 2rem;
  background: rgba(255,255,255,0.05);
  border-radius: 10px;
  box-shadow: 0 0 20px rgba(0,0,0,0.3);
}
</style>
</head>
<body>
<div class="login-container text-center">
  <h2 class="mb-4"><i class="fa-solid fa-gauge-high"></i> لورنا مانیتورینگ</h2>
  {% if error %}<div class="alert alert-danger">{{error}}</div>{% endif %}
  <form method="post">
    <div class="mb-3">
      <input type="text" class="form-control" name="username" placeholder="نام کاربری" required>
    </div>
    <div class="mb-3">
      <input type="password" class="form-control" name="password" placeholder="رمز عبور" required>
    </div>
    <div class="mb-3">
      <input type="text" class="form-control" name="license" placeholder="کد لایسنس">
    </div>
    <button class="btn btn-primary w-100">ورود</button>
  </form>
</div>
</body>
</html>
"""

dash_tpl = """
<!doctype html>
<html lang="fa" dir="rtl">
<head>
<meta charset="utf-8">
<title>داشبورد لورنا</title>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.rtl.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" rel="stylesheet">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<style>
body { background-color: #f8fafc; }
.card { box-shadow: 0 0 10px rgba(0,0,0,0.05); }
</style>
</head>
<body>
<nav class="navbar navbar-expand-lg navbar-dark bg-dark mb-4">
  <div class="container-fluid">
    <span class="navbar-brand"><i class="fa-solid fa-gauge-high"></i> لورنا مانیتورینگ</span>
    <div>
      <a href="{{url_for('logout')}}" class="btn btn-danger btn-sm">خروج</a>
    </div>
  </div>
</nav>
<div class="container">
  {% if not license_ok %}
  <div class="alert alert-warning">
    لایسنس ثبت نشده است.
    <form method="post" action="{{url_for('set_license')}}" class="d-inline">
      <input name="license" placeholder="کد لایسنس">
      <button class="btn btn-sm btn-success">ثبت</button>
    </form>
  </div>
  {% endif %}
  <div class="row" id="stats">
    <div class="col-md-3 mb-3">
      <div class="card text-center">
        <div class="card-body">
          <i class="fa-solid fa-microchip fa-2x mb-2"></i>
          <h5>CPU</h5>
          <p class="h4" id="cpu">--%</p>
        </div>
      </div>
    </div>
    <div class="col-md-3 mb-3">
      <div class="card text-center">
        <div class="card-body">
          <i class="fa-solid fa-memory fa-2x mb-2"></i>
          <h5>RAM</h5>
          <p class="h4" id="ram">--%</p>
        </div>
      </div>
    </div>
    <div class="col-md-3 mb-3">
      <div class="card text-center">
        <div class="card-body">
          <i class="fa-solid fa-upload fa-2x mb-2"></i>
          <h5>آپلود</h5>
          <p class="h4" id="up">-- Mbps</p>
        </div>
      </div>
    </div>
    <div class="col-md-3 mb-3">
      <div class="card text-center">
        <div class="card-body">
          <i class="fa-solid fa-download fa-2x mb-2"></i>
          <h5>دانلود</h5>
          <p class="h4" id="down">-- Mbps</p>
        </div>
      </div>
    </div>
    <div class="col-md-3 mb-3">
      <div class="card text-center">
        <div class="card-body">
          <i class="fa-solid fa-link fa-2x mb-2"></i>
          <h5>Xray</h5>
          <p class="h4" id="xray">--</p>
        </div>
      </div>
    </div>
  </div>
</div>
<script>
function loadStats(){
  $.getJSON('/get_system_data', function(data){
    $("#cpu").text(data.cpu + "%");
    $("#ram").text(data.ram + "%");
    $("#up").text(data.net.upload_mbps + " Mbps");
    $("#down").text(data.net.download_mbps + " Mbps");
    $("#xray").text(data.xray.users + " کاربر");
  });
}
setInterval(loadStats, 3000);
loadStats();
</script>
</body>
</html>
"""

@app.route('/', methods=['GET', 'POST'])
def login():
    if 'logged_in' in session:
        return redirect(url_for('dashboard'))
    error = None
    if request.method == 'POST':
        if request.form['username'] == USERNAME and request.form['password'] == PASSWORD:
            session['logged_in'] = True
            session['license_ok'] = verify_license(request.form['license'])
            return redirect(url_for('dashboard'))
        else:
            error = "نام کاربری یا رمز اشتباه"
    return render_template_string(login_tpl, error=error)

@app.route('/dashboard')
@app.route('/dash')
def dashboard():
    if 'logged_in' not in session:
        return redirect(url_for('login'))
    return render_template_string(dash_tpl, license_ok=session.get('license_ok', False))

@app.route('/set_license', methods=['POST'])
def set_license():
    if 'logged_in' not in session:
        return redirect(url_for('login'))
    session['license_ok'] = verify_license(request.form['license'])
    return redirect(url_for('dashboard'))

@app.route('/get_system_data')
def get_system_data():
    if 'logged_in' not in session:
        return jsonify({'error': 'Unauthorized'}), 401
    cpu = psutil.cpu_percent(0.1)
    ram = psutil.virtual_memory().percent
    up, down = net_speed()
    xu, _ = xray_users()
    return jsonify({'cpu': cpu, 'ram': ram, 'net': {'upload_mbps': up, 'download_mbps': down}, 'xray': {'users': xu}})

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('login'))

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 5000)))
PYEOF

  sed -i "s/key/$SECRET_KEY/" "$APP_DIR/app.py"

  echo "[*] ساخت سرویس systemd..."
cat > "$SYSTEMD_FILE" <<EOF
[Unit]
Description=Lorna Monitoring Panel
After=network.target

[Service]
User=$(whoami)
WorkingDirectory=$APP_DIR
Environment="FLASK_SECRET_KEY=$SECRET_KEY"
Environment="LORNA_USERNAME=$DEFAULT_USERNAME"
Environment="LORNA_PASSWORD=$DEFAULT_PASSWORD"
Environment="XRAY_PORT=$XRAY_PORT"
Environment="PORT=$APP_PORT"
ExecStart=$VENV_DIR/bin/gunicorn --workers $GUNICORN_WORKERS --bind 0.0.0.0:$APP_PORT app:app
Restart=always

[Install]
WantedBy=multi-user.target
EOF

  systemctl daemon-reload
  systemctl enable "$SERVICE_NAME"
  systemctl start "$SERVICE_NAME"

  echo "✅ نصب کامل شد"
  echo "📌 آدرس: http://<IP>:$APP_PORT"
  echo "👤 $DEFAULT_USERNAME / 🔑 $DEFAULT_PASSWORD"
  echo "📄 لایسنس: $LICENSE_VALUE"

elif [ "$CHOICE" == "2" ]; then
  echo "[*] حذف کامل..."
  systemctl stop "$SERVICE_NAME" 2>/dev/null || true
  systemctl disable "$SERVICE_NAME" 2>/dev/null || true
  rm -f "$SYSTEMD_FILE"
  systemctl daemon-reload
  pkill -f "gunicorn.*app:app" 2>/dev/null || true
  rm -rf "$APP_DIR" "$LOG_DIR"
  echo "✅ حذف انجام شد"
fi
